"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 移除数组array中所有和给定值相等的元素，这个方法会改变数组
 * @param array
 * @param rest
 */
function pull(array) {
    var rest = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        rest[_i - 1] = arguments[_i];
    }
    if (array === null || array === undefined) {
        return [];
    }
    var filters = [];
    rest.forEach(function (each) {
        if (Array.isArray(each)) {
            filters.push.apply(filters, __spreadArray([], __read(each), false));
        }
        else {
            filters.push(each);
        }
    });
    for (var i = 0; i < array.length; i++) {
        if (filters.includes(array[i])) {
            array.splice(i, 1);
            i = 0;
        }
    }
    return array;
}
exports.default = pull;
