"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var baseCompare_1 = require("./common/baseCompare");
var pull_1 = __importDefault(require("./pull"));
/**
 * 移除数组中predicate（断言）返回为真值的所有元素，并返回移除元素组成的数组(使用pull方法来根据提供的value值从数组中移除元)。
 * predicate（断言） 会传入3个参数： (value, index, array)。
 * 返回移除元素组成的新数组
 * @param input
 * @param predicate
 */
function remove(input, predicate) {
    if (input === null || input === undefined) {
        return [];
    }
    var result = [];
    var filterIteratee = (0, baseCompare_1.wrapIteratee)(predicate);
    for (var i = 0; i < input.length; i++) {
        if (filterIteratee(input[i], i, input)) {
            result.push(input[i]);
        }
    }
    (0, pull_1.default)(input, result);
    return result.length ? result : __spreadArray([], __read(input), false);
}
exports.default = remove;
