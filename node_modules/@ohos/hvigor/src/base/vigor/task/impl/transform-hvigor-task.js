"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.TransformHvigorTask=void 0;const incremental_task_js_1=require("../../../external/task/incremental-task.js"),hvigor_log_js_1=require("../../../log/hvigor-log.js"),input_output_js_1=require("../interface/input-output.js");class TransformHvigorTask extends incremental_task_js_1.IncrementalTask{constructor(t,e){super(t,e.name),this.logger=hvigor_log_js_1.HvigorLogger.getLogger(TransformHvigorTask.name),this.task=e,this._inputs=super.declareInputs(),this._inputFiles=super.declareInputFiles(),this._outputFiles=super.declareOutputFiles(),this.taskRunContext=this.getTaskParam()}initTaskContext(){var t,e,s;this.taskContext={...this.task,context:null===(t=this.task.context)||void 0===t?void 0:t.apply()},null===(e=this.task.input)||void 0===e||e.apply(this.taskContext,[new input_output_js_1.TaskInput(this._inputs,this._inputFiles)]),null===(s=this.task.output)||void 0===s||s.apply(this.taskContext,[new input_output_js_1.TaskOutput(this._outputFiles)])}initDependency(){const t=`${this.taskRunContext.moduleName}:${this.task.name}`;if(this.task.dependencies&&Array.isArray(this.task.dependencies))for(const e of this.task.dependencies)this.logger.debug(`hvigorfile, registering dependency, taskName=${t}, dependency=${e}`),this.dependsOn(e);if(this.task.postDependencies&&Array.isArray(this.task.postDependencies))for(const e of this.task.postDependencies){this.logger.debug(`hvigorfile, registering postDependency, taskName=${t},\n         postDependency=${e}`);const s=this.node.getTaskByName(e);s?s.dependsOn(this.task.name,this.node):this.logger.warn(`${t}, postDependency ${e} not found.`)}}initTaskRun(){this.task.beforeRun&&"function"==typeof this.task.beforeRun&&super.beforeRun((async()=>{await this.task.beforeRun.apply(this.taskContext,[this.taskRunContext])})),this.task.afterRun&&"function"==typeof this.task.afterRun&&super.afterRun((async()=>{await this.task.afterRun.apply(this.taskContext,[this.taskRunContext])}))}getAction(){return this.doTaskAction}async doTaskAction(){this.executeBeforeRun(),this.task.run&&"function"==typeof this.task.run&&await this.task.run.apply(this.taskContext,[this.taskRunContext]),this.executeAfterRun()}getTaskParam(){return{moduleName:this.node.getName(),modulePath:this.node.getNodeDir()}}declareInputs(){return this._inputs}declareInputFiles(){return this._inputFiles}declareOutputFiles(){return this._outputFiles}}exports.TransformHvigorTask=TransformHvigorTask;