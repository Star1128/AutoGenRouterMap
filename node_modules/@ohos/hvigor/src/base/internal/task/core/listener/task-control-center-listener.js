"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.onTaskUpToDated=exports.onTaskDisabled=exports.onTaskFailed=exports.onTaskFinished=exports.onWorkFailed=void 0;const trace_util_1=require("../../../../common/trace/trace-util"),hvigor_log_js_1=require("../../../../log/hvigor-log.js"),duration_event_js_1=require("../../../../metrics/event/duration-event.js"),log_event_1=require("../../../../metrics/event/log-event"),task_util_js_1=require("../../../../util/task-util.js"),time_util_js_1=require("../../../../util/time-util.js"),hvigor_process_js_1=require("../../../lifecycle/hvigor-process.js"),task_control_center_js_1=require("../task-control-center.js"),log=hvigor_log_js_1.HvigorLogger.getLogger("hvigor-task-control-center-listener"),onWorkFailed=(e,t)=>{(0,exports.onTaskFailed)(e,t),hvigor_process_js_1.hvigorProcess.error(t,e.getTaskLog())};exports.onWorkFailed=onWorkFailed;const onTaskFinished=e=>{e.durationEvent.stop(duration_event_js_1.DurationEventState.SUCCESS),(0,task_util_js_1.markTaskExecuteSuccessful)(e);const t=process.hrtime(e.taskExecutedStatus.getTaskBeginTime()),o=(0,time_util_js_1.formatTime)((0,time_util_js_1.formatTimeToNumPair)((0,time_util_js_1.getIntersect)(e.taskExecutedStatus.getWorkerTimePeriod()))),s=""===o?(0,time_util_js_1.formatTime)(t):o,r=`Finished :${e.getPath()}`;e.durationEvent.setLog(r,log_event_1.MetricLogType.INFO,e.getDescription(),(0,time_util_js_1.getIntersect)(e.taskExecutedStatus.getWorkerTimePeriod())),log._printTaskExecuteInfo(e.getPath(),s),(0,trace_util_1.recordTraceData)(e.getName(),1e9*t[0]+t[1]),task_control_center_js_1.taskControlCenter.setTaskExecuted(e.getPath())};exports.onTaskFinished=onTaskFinished;const onTaskFailed=(e,t)=>{e.durationEvent.stop(duration_event_js_1.DurationEventState.FAILED);const o=`Failed :${e.getPath()}`;e.durationEvent.setLog(o,log_event_1.MetricLogType.ERROR,e.getDescription()),e.onFailed(t),log._printFailedTaskInfo(e.getPath())};exports.onTaskFailed=onTaskFailed;const onTaskDisabled=e=>{e.durationEvent.stop(duration_event_js_1.DurationEventState.SUCCESS);const t=`Disabled :${e.getPath()}`;e.durationEvent.setLog(t,log_event_1.MetricLogType.INFO,e.getDescription()),log._printDisabledTaskInfo(e.getPath()),task_control_center_js_1.taskControlCenter.setTaskExecuted(e.getPath())};exports.onTaskDisabled=onTaskDisabled;const onTaskUpToDated=e=>{e.durationEvent.stop(duration_event_js_1.DurationEventState.SUCCESS);const t=`UP-TO-DATE :${e.getPath()}`;e.durationEvent.setLog(t,log_event_1.MetricLogType.INFO,e.getDescription()),(0,task_util_js_1.markTaskExecuteSuccessful)(e),log._printUpToDateTaskInfo(e.getPath()),task_control_center_js_1.taskControlCenter.setTaskExecuted(e.getPath())};exports.onTaskUpToDated=onTaskUpToDated;