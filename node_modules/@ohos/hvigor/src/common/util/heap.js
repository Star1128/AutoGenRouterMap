"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Heap=void 0;class Heap{constructor(e){this.elements=[],this.element2index=new Map,this.size=0,this.compare=e}update(e){this.element2index.has(e)&&(this.up(this.element2index.get(e)),this.down(this.element2index.get(e)))}clear(){this.size=0}peek(){if(0!==this.size)return this.elements[1]}push(e){this.size++,this.elements[this.size]=e,this.element2index.set(e,this.size),this.up(this.size)}pop(){if(0!==this.size)return this.swap(1,this.size),this.size--,this.down(1),this.element2index.delete(this.elements[this.size+1]),this.elements[this.size+1]}empty(){return 0===this.size}up(e){let s=Math.ceil(e/2);for(;s>=1&&this.compare(this.elements[e],this.elements[s])<0;)this.swap(e,s),e=s,s=Math.ceil(e/2)}down(e){let s=e;2*e<=this.size&&this.compare(this.elements[2*e],this.elements[s])<0&&(s=2*e),2*e+1<=this.size&&this.compare(this.elements[2*e+1],this.elements[s])<0&&(s=2*e+1),e!==s&&(this.swap(e,s),this.down(s))}swap(e,s){const t=this.elements[e];this.elements[e]=this.elements[s],this.elements[s]=t,this.element2index.set(this.elements[e],e),this.element2index.set(this.elements[s],s)}}exports.Heap=Heap;