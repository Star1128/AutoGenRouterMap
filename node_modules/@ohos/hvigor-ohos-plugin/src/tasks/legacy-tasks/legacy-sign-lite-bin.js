"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i);var n=Object.getOwnPropertyDescriptor(t,i);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,s,n)}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&__createBinding(t,e,i);return __setModuleDefault(t,e),t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.LegacySignLiteBin=void 0;const path=__importStar(require("path")),build_directory_const_js_1=require("../../const/build-directory-const.js"),sign_type_enum_js_1=require("../../enum/sign-type-enum.js"),base_sign_js_1=require("../base/base-sign.js"),task_names_js_1=require("../common/task-names.js"),sign_model_js_1=require("../sign/command-builder-impl/sign-model.js");var LegacyFATask=task_names_js_1.TaskNames.LegacyFATask;class LegacySignLiteBin extends base_sign_js_1.BaseSign{constructor(e){super(e,task_names_js_1.TaskNames.LegacyFATask.SIGN_LITE_BIN,sign_type_enum_js_1.SignTypeEnum.BIN),this.inputFile=path.resolve(this.pathInfo.getModuleBinOutput(),this.targetData.getModuleTargetOutputFileName("",!1,build_directory_const_js_1.BuildArtifactExtension.DOT_BIN)),this.outputFile=path.resolve(this.pathInfo.getModuleBinOutput(),this.targetData.getModuleTargetOutputFileName("",!0,build_directory_const_js_1.BuildArtifactExtension.DOT_BIN)),this.targetServiceData=this.targetService.getTargetData()}declareInputFiles(){const e=super.declareInputFiles();return this.targetService.needPackBin(this.targetServiceData)?e.addEntry(this.inputFile,{isDirectory:!1}):e}declareOutputFiles(){const e=super.declareOutputFiles();return this.outputFile&&e.addEntry(this.outputFile,{isDirectory:!1}),e}taskShouldDo(){return this.targetService.needPackBin(this.targetServiceData)}initTaskDepends(){this.declareDepends(LegacyFATask.GENERATE_LITE_CODE.name)}async doTaskAction(){await this.signUtil.sign(new sign_model_js_1.SignModel(sign_type_enum_js_1.SignTypeEnum.BIN,this.inputFile,this.outputFile),this.durationEvent)}}exports.LegacySignLiteBin=LegacySignLiteBin;