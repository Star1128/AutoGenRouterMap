"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.SignHap=void 0;const hvigor_1=require("@ohos/hvigor"),fs_extra_1=__importDefault(require("fs-extra")),path_1=__importDefault(require("path")),file_util_js_1=require("../utils/file-util.js"),base_sign_js_1=require("./base/base-sign.js"),task_names_js_1=require("./common/task-names.js"),legacy_package_hap_1=require("./legacy-tasks/legacy-package-hap"),module_task_service_js_1=require("./service/module-task-service.js"),sign_model_js_1=require("./sign/command-builder-impl/sign-model.js"),package_hap_js_1=require("./package-hap.js"),common_const_js_1=require("../const/common-const.js");class SignHap extends base_sign_js_1.BaseSign{constructor(e){super(e,task_names_js_1.TaskNames.CommonTask.SIGN_HAP),this.signModelList=[],this.initSignModelData()}taskShouldDo(){var e;return!((null===(e=this.targetService.getBuildOption().packOptions)||void 0===e?void 0:e.buildAppSkipSignHap)&&hvigor_1.hvigorCore.isCommandEntryTask(task_names_js_1.TaskNames.CommonHookTask.ASSEMBLE_APP.name))}declareInputFiles(){const e=super.declareInputFiles();for(const t of this.signModelList){const s=t.getInputFilePath();fs_extra_1.default.existsSync(s)&&e.addEntry(s,{isDirectory:!1})}return e}declareOutputFiles(){const e=super.declareOutputFiles();for(const t of this.signModelList){const s=t.getOutPutFilePath();s&&e.addEntry(s,{isDirectory:!1})}return e}async doTaskAction(){for(const e of this.signModelList){if(file_util_js_1.FileUtil.deleteFile(e.getOutPutFilePath()),!hvigor_1.hvigorCore.getParameter().getProperty(common_const_js_1.CommonConst.ENABLE_SIGN_TASK))return;await this.signUtil.sign(e,this.durationEvent)}}initTaskDepends(){this.declareDepends(this.isFaMode?legacy_package_hap_1.LegacyPackageHap.name:package_hap_js_1.PackageHap.name)}initSignModelData(){const e=this.service.getRelatedEntryModules(),t=this.service.getModuleModel().getModuleType();if(module_task_service_js_1.ModuleTaskService.checkEntryModules(t,e))for(const t of e)this.addSignModel(t);else this.addSignModel("")}addSignModel(e){if(this.targetData.isSingleDeviceTypeTarget()){const t=this.targetData.getModuleTargetOutputFileName(e,!1),s=path_1.default.resolve(this.pathInfo.getModuleBuildOutputPath(),t),i=path_1.default.resolve(this.pathInfo.getModuleBuildOutputPath(),this.targetData.getModuleTargetOutputFileName(e,!0));this.signModelList.push(new sign_model_js_1.SignModel(this.signType,s,i))}else this.targetData.getTargetDeviceTypeClasses().forEach((t=>{const s=this.targetData.getModuleTargetOutputFileName(e,!1,void 0,t),i=path_1.default.resolve(this.pathInfo.getModuleBuildOutputPath(),s),a=this.targetData.getModuleTargetOutputFileName(e,!0,void 0,t),o=path_1.default.resolve(this.pathInfo.getModuleBuildOutputPath(),a);this.signModelList.push(new sign_model_js_1.SignModel(this.signType,i,o))}))}}exports.SignHap=SignHap;