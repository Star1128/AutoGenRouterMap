"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.SignProjectRemoteHsp=void 0;const path_1=__importDefault(require("path")),common_const_js_1=require("../const/common-const.js"),task_names_js_1=require("./common/task-names.js"),global_project_data_service_js_1=require("./service/global-project-data-service.js"),sign_util_js_1=require("./sign/sign-util.js"),sign_remote_hsp_js_1=require("./sign-remote-hsp.js");class SignProjectRemoteHsp extends sign_remote_hsp_js_1.SignRemoteHsp{constructor(e){super(e,task_names_js_1.TaskNames.CommonTask.SIGN_PROJECT_REMOTE_HSP);const t=this.service.getProjectModel().getRemoteHspPath();this.getProjectSignRemoteHspMap(t),this.allProjectRequiredSignRemoteHspMap.size>0&&(this.createProjectRemoteHspCache(),this.initAllSignRemoteHspList(this.allProjectHspPathList,this.allProjectRemoteHspPathList,this.allProjectSignedRemoteHspList,this.allProjectRequiredSignRemoteHspMap))}taskShouldDo(){return(0,sign_util_js_1.isSigned)(this.projectModel)}async doTaskAction(){const e=global_project_data_service_js_1.GlobalProjectDataService.getInstance().getProjectRemoteHspPromise();if(e&&0===this.allProjectSignedRemoteHspList.length)return this._log.debug("the project remote_hsps are signing or signed, just await"),void await e;const t=this.doSignAction();global_project_data_service_js_1.GlobalProjectDataService.getInstance().setProjectRemoteHspPromise(t),await t}async doSignAction(){try{if(0===this.allProjectSignedRemoteHspList.length)return;const e=this.projectModel.getCacheRemoteHspPath(this.targetData.getProduct().name),t=path_1.default.resolve(e,common_const_js_1.CommonConst.REMOTE_HSP_CACHE);this._log.debug(`this.allProjectSignedRemoteHspList ${this.allProjectSignedRemoteHspList}`);for(const e of this.allProjectSignedRemoteHspList)await this.submitSignWorker(e,(()=>{this.signRemoteHspCallBack(t,e.getOutPutFilePath())}))}catch(e){this._log._buildError(e)._printErrorAndExit()}}declareInputFiles(){return super.declareInputFiles().addEntries([...this.allProjectRemoteHspPathList],{isDirectory:!1})}declareOutputFiles(){return super.declareOutputFiles().addEntries([...this.allProjectHspPathList],{isDirectory:!1})}initTaskDepends(){}}exports.SignProjectRemoteHsp=SignProjectRemoteHsp;