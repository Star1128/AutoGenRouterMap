"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.ConfigureCmake=void 0;const fs_extra_1=__importDefault(require("fs-extra")),os_1=__importDefault(require("os")),path_1=__importDefault(require("path")),common_const_js_1=require("../const/common-const.js"),cmake_util_js_1=require("../utils/cmake-util.js"),ohos_logger_js_1=require("../utils/log/ohos-logger.js"),native_cmake_resolver_js_1=require("../utils/native-cmake-resolver.js"),task_names_js_1=require("./common/task-names.js"),legacy_pre_build_js_1=require("./legacy-tasks/legacy-pre-build.js"),ohos_hap_task_js_1=require("./task/ohos-hap-task.js"),pre_build_js_1=require("./pre-build.js"),_log=ohos_logger_js_1.OhosLogger.getLogger("ConfigureCmake");class ConfigureCmake extends ohos_hap_task_js_1.OhosHapTask{constructor(e){var t;super(e,task_names_js_1.TaskNames.Task.CONFIGURE_CMAKE),this.dependencies=[],this.packages=[],this.nativeOption=e.getBuildOption().externalNativeOptions,this.abiList=cmake_util_js_1.CmakeUtil.checkAbiFilters(null===(t=this.nativeOption)||void 0===t?void 0:t.abiFilters,e.getTargetData().isHarmonyOS(),this.moduleModel),this.cmakeDir=path_1.default.resolve(this.pathInfo.getNinjaWorkDir(),"hvigor"),this.init()}taskShouldDo(){return cmake_util_js_1.CmakeUtil.nativeTaskCondition(this.moduleModel,this.targetData,this.nativeOption)}init(){for(const e of this.service.getDependencyInfo().getNpmDependencies()){const t=this.isLocal(e);this.isNativeLibrary(e,t)&&(_log.debug(`Resolve native package ${e.getDependencyName()}.`),this.dependencies.push(e),this.packages.push(native_cmake_resolver_js_1.PackageResolver.getInstance(e,this.abiList,this.cmakeDir,t)))}}async doTaskAction(){await Promise.all(this.packages.map((e=>e.build()))),await this.genCmakeFindFile()}async genCmakeFindFile(){for(const e of this.abiList){const t=this.packages.map((t=>t.archs.find((t=>t.arch===e)))).filter((e=>void 0!==e)).map((e=>e?`if(EXISTS ${e.cmakeFile.replace(/\\/g,"/")})${os_1.default.EOL}    find_package(${e.pkg.name} REQUIRED CONFIG)${os_1.default.EOL}endif()${os_1.default.EOL}`:"")).join(os_1.default.EOL),a=path_1.default.resolve(this.cmakeDir,e,common_const_js_1.NativeConst.PACKAGE_SUMMARY_FILE);if(fs_extra_1.default.existsSync(a)){if(await fs_extra_1.default.readFile(a,{encoding:"utf8"})===t)return}await fs_extra_1.default.ensureDir(path_1.default.dirname(a)),await fs_extra_1.default.writeFile(a,t)}}initTaskDepends(){var e;this.declareDepends(this.isFaMode?legacy_pre_build_js_1.LegacyPreBuild.name:pre_build_js_1.PreBuild.name);const t=this.targetService.getModuleService();for(const a of t.getDependencyInfo().getModuleDependencyMap().keys()){const t=this.getModuleTarget(a),s=null!==(e=null==t?void 0:t.getTargetData().getTargetName())&&void 0!==e?e:"default";this.declareDepends(`${s}@${task_names_js_1.TaskNames.Task.BUILD_NATIVE_WITH_CMAKE.name}`,a)}}isLocal(e){if(!e.isLocal())return;const t=this.service.getModuleDependencies().find((t=>path_1.default.resolve(t.getDependencyRootPath())===e.getDependencyRootPath()));return t?this.getModuleTarget(t.getModuleName()):void 0}getModuleTarget(e){var t,a;const s=this.targetService.getModuleService().getProjectModel();return null!==(a=null!==(t=s.getTarget(e,this.targetName))&&void 0!==t?t:s.getTarget(e,common_const_js_1.DefaultTargetConst.DEFAULT_TARGET))&&void 0!==a?a:s.getTarget(e)}isNativeLibrary(e,t){return t?cmake_util_js_1.CmakeUtil.nativeTaskCondition(t.getModuleService().getModuleModel(),t.getTargetData(),t.getBuildOption().externalNativeOptions):fs_extra_1.default.existsSync(path_1.default.resolve(e.getDependencyRootPath(),"libs"))&&fs_extra_1.default.readdirSync(path_1.default.resolve(e.getDependencyRootPath(),"libs")).length>0||fs_extra_1.default.existsSync(path_1.default.resolve(e.getDependencyRootPath(),"include"))}}exports.ConfigureCmake=ConfigureCmake;