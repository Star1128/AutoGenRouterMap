"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,r,i){void 0===i&&(i=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,i,s)}:function(e,t,r,i){void 0===i&&(i=r),e[i]=t[r]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&__createBinding(t,e,r);return __setModuleDefault(t,e),t},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.Clean=void 0;const hvigor_1=require("@ohos/hvigor"),hvigor_2=require("@ohos/hvigor"),fs=__importStar(require("fs")),fs_extra_1=__importDefault(require("fs-extra")),os_1=__importDefault(require("os")),path_1=__importDefault(require("path")),build_directory_const_js_1=require("../../const/build-directory-const.js"),ohos_plugin_id_js_1=require("../../plugin/common/ohos-plugin-id.js"),inject_util_js_1=require("../../utils/inject-util.js"),ohos_logger_js_1=require("../../utils/log/ohos-logger.js"),process_utils_1=require("../../utils/process-utils"),validator_store_js_1=require("../../utils/validate/validator-store.js"),global_project_data_service_js_1=require("../service/global-project-data-service.js"),module_task_service_js_1=require("../service/module-task-service.js"),task_names_js_1=require("./task-names.js");class Clean extends hvigor_1.DefaultTask{constructor(e,t){super(e,task_names_js_1.TaskNames.CommonTask.CLEAN),this._logger=ohos_logger_js_1.OhosLogger.getLogger(Clean.name),this.nativeClean=e=>{if(!e)return;const t=new process_utils_1.ProcessUtils;let r;if(!(this._taskService instanceof module_task_service_js_1.ModuleTaskService))return;const i=path_1.default.resolve(this._taskService.getModuleModel().getProjectDir(),".cxx");if(!fs.existsSync(i))return;const s=[];this.getArchDirectories(i,s,this._taskService);const o=e.getSdkToolchainsDir();if(void 0!==o){const e=path_1.default.dirname(o);r=path_1.default.resolve(e,"native/build-tools/cmake/bin/ninja.exe")}const a=[];for(const e of s){const i=path_1.default.resolve(e,"CMakeCache.txt"),s=path_1.default.resolve(e,"build.ninja"),o=path_1.default.resolve(e,"rules.ninja");if(fs.existsSync(i)&&fs.existsSync(s)&&fs.existsSync(o)){if(void 0!==r&&fs.existsSync(r)){const i=[];i.push(r),i.push("-C"),i.push(e),i.push("clean"),this.tryCatchExecute(i,a,e,t)}fs.existsSync(i)&&fs.unlinkSync(i)}}if(a.length>0){let e="Delete the following directories that are no longer needed:";for(const t of a)e=e.concat(os_1.default.EOL,t);this._logger.warn(e)}},this.tryCatchExecute=(e,t,r,i)=>{try{i.executeSync(e)}catch(e){t.push(r)}},this.getArchDirectories=(e,t,r)=>{for(const i of r.getProjectModel().getProductNames())for(const s of r.getTargets()){const r=path_1.default.resolve(e,i,s.getTargetName());this.pushArchDirectories(r,t)}},this.registryAction=()=>async()=>{if(await this.terminateWorkerPool(),await this.clean(path_1.default.resolve(this._taskService.getProjectModel().getProjectDir(),"build")),this.resetRemoteHspCache(),this._taskService instanceof module_task_service_js_1.ModuleTaskService){const e=this._taskService.getModuleModel();if(!e)return;await this.clean(path_1.default.resolve(e.getProjectDir(),"build"))}},this.clean=async e=>{var t;let r=!1;r||(r=this.rmdirSyncWithBuildDir(e));const i=inject_util_js_1.InjectUtil.getBuildCacheParentDir(e,path_1.default.join(hvigor_1.hvigorCore.getProject().getName(),e.substring(hvigor_1.hvigorCore.getProject().getNodeDir().length)));if(i!==e&&(r||(r=this.rmdirSyncWithBuildDir(i)),(0,hvigor_1.isCI)())){const e=path_1.default.join(path_1.default.dirname(i),build_directory_const_js_1.BuildDirConst.CPP_OUTPUT);r||(r=this.rmdirSyncWithBuildDir(e)),r||this._logger.debug("CI scenario cleared .cxx dir.")}if(r&&this._logger._buildError(`Unable to delete ${e}. some files may be opened by another program.`)._printErrorAndExit(),"project"===this.node.classKind)return;const s=null===(t=this._taskService.getProjectModel().getProject().getPluginById(ohos_plugin_id_js_1.OhosPluginId.OHOS_APP_PLUGIN).getTaskService())||void 0===t?void 0:t.getSdkInfo();this.nativeClean(s)},this.terminateWorkerPool=async()=>{this.getWorkerPool().isActive()?(this._logger.debug("clean: Start terminating worker pool."),await this.getWorkerPool().terminate(),this._logger.debug("clean: Terminating worker pool finished."),hvigor_2.TcbStore.clear(),validator_store_js_1.ValidatorStore.clear()):this._logger.debug("clean: Worker pool is inactive.")},this.rmdirSyncWithBuildDir=e=>{let t=!1;return fs.existsSync(e)&&(t=this.rmdirSync(e,!1)),t&&this._logger._buildError(`Unable to delete ${e}. some files may be opened by another program.`)._printErrorAndExit(),t},this.rmdirSync=(e,t)=>{fs.readdirSync(e).forEach((r=>{const i=path_1.default.resolve(e,r),s=fs.lstatSync(i);if(s.isFile()||s.isSymbolicLink())try{fs.unlinkSync(i)}catch(e){hvigor_1.MetricFactory.createLogEvent(e.message,hvigor_1.MetricLogType.DEBUG),hvigor_1.MetricFactory.createLogEvent(`Cannot delete ${i}. The file may be opened by another program.`,hvigor_1.MetricLogType.WARN),this._logger.debug(e.message),this._logger.warn(`Cannot delete ${i}. The file may be opened by another program.`),t=!0}else s.isDirectory()&&(t=this.rmdirSync(i,t))}));try{let r=!0;if(!fs.existsSync(e))return t;fs.readdirSync(e).forEach((t=>{const i=path_1.default.resolve(e,t);fs.existsSync(i)&&(r=!1)})),r&&fs_extra_1.default.removeSync(e)}catch(r){hvigor_1.MetricFactory.createLogEvent(r.message,hvigor_1.MetricLogType.DEBUG),hvigor_1.MetricFactory.createLogEvent(`Unable to delete ${e}. A file may be open by another program.`,hvigor_1.MetricLogType.WARN),this._logger.debug(r.message),this._logger.warn(`Unable to delete ${e}. A file may be open by another program.`),t=!0}return t},this._taskService=t}pushArchDirectories(e,t){if(!fs.existsSync(e)||!this.isDirectory(e))return;const r=fs.readdirSync(e);for(const i of r){const r=path_1.default.join(e,i);if("arm64-v8a"===i||"armeabi-v7a"===i||"x86_64"===i){if(!this.isDirectory(r))continue;t.push(r)}}}isDirectory(e){try{return fs.readdirSync(e),!0}catch(e){return!1}}resetRemoteHspCache(){global_project_data_service_js_1.GlobalProjectDataService.getInstance().resetRemoteHspCache()}}exports.Clean=Clean;