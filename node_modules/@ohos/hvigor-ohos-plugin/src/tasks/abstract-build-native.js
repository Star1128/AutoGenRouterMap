"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.nativeExecution=exports.AbstractBuildNative=void 0;const hvigor_1=require("@ohos/hvigor"),child_process_1=require("child_process"),fs_1=require("fs"),promises_1=require("node:fs/promises"),path_1=__importDefault(require("path")),log_adaptor_js_1=require("../utils/log/log-adaptor.js"),ohos_logger_js_1=require("../utils/log/ohos-logger.js"),ohos_hap_task_js_1=require("./task/ohos-hap-task.js"),logger=ohos_logger_js_1.OhosLogger.getLogger("Native"),ErrorFlags=new Map([["error: undefined symbol: ","NE10000"],["error: unknown type name ","NE10001"]]);class AbstractBuildNative extends ohos_hap_task_js_1.OhosHapTask{constructor(e,o){super(e,o),this._nativeOption=e.getBuildOption().externalNativeOptions}async executeCommand(e,o,t,r,s){const i={commandLine:e,logFolder:o},a={workInput:i,callback:t,callbackInput:r},n=path_1.default.resolve(__filename,"nativeExecution");if(this.getWorkerPool().submit(this,n,a).getState()===hvigor_1.TaskState.REJECT){const e="execute the command",o=s.createSubEvent(e,"");o.start(),await(0,exports.nativeExecution)(i),await t(...r),o.stop(),o.setLog(e,hvigor_1.MetricLogType.INFO)}}}exports.AbstractBuildNative=AbstractBuildNative;const nativeExecution=async(e,o)=>{var t,r;null==o||o.mount("nativeExecution").setCache("args",e);const s=(0,hvigor_1.isWindows)()?"GBK":"UTF-8",i=path_1.default.resolve(e.logFolder,"output.log"),a=(0,child_process_1.spawn)(e.commandLine[0],e.commandLine.slice(1),{windowsHide:!0}),n=(0,fs_1.createWriteStream)(i,{});return null===(t=a.stdout)||void 0===t||t.on("data",(e=>{const o=hvigor_1.iconv.decode(e,s);n.write(o),logger.debug(o)})),null===(r=a.stderr)||void 0===r||r.on("data",(e=>{const o=hvigor_1.iconv.decode(e,s);n.write(o),logger.warn(o)})),new Promise(((e,o)=>{a.once("close",(async t=>{if(n.end(),0===t)e();else{const e=await readException(i);logger._buildError(e)._printErrorAndExit(),o(e)}}))}))};exports.nativeExecution=nativeExecution;const readException=async e=>{var o;let t;try{const r=await(0,promises_1.readFile)(e,{encoding:"utf8"});t=`Exceptions happened while executing: ${r}`;for(const[e,s]of ErrorFlags.entries())if(r.includes(e)){const e=new log_adaptor_js_1.OhosLogAdaptor(s,hvigor_1.globalData.buildId).getLogMessage();let r=`${e.message}\n* Try the following:\n`;r+=`\t> ${null===(o=e.solutions)||void 0===o?void 0:o.join(" ")}\n`,e.moreInfo&&(r+=`\t> More info: ${e.moreInfo}`),t+=r;break}}catch(o){t=`Log parsing failed. Please check the log file at ${e}.`}return t};