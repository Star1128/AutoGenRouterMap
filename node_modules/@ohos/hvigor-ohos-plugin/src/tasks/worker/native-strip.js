"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.cleanSymbolicLink=exports.cleanStrippedSo=exports.strip=void 0;const fs_extra_1=__importDefault(require("fs-extra")),glob_1=require("glob"),path_1=__importDefault(require("path")),base_command_builder_js_1=require("../../builder/base-command-builder.js"),common_const_js_1=require("../../const/common-const.js"),file_util_js_1=require("../../utils/file-util.js"),libs_file_cache_util_js_1=require("../../utils/libs-file-cache-util.js"),ohos_logger_js_1=require("../../utils/log/ohos-logger.js"),process_utils_js_1=require("../../utils/process-utils.js"),so_strip_util_js_1=require("../../utils/so-strip-util.js"),logger=ohos_logger_js_1.OhosLogger.getLogger("NativeStrip");async function strip(e){await fs_extra_1.default.ensureDir(e.strippedNativeLibs),so_strip_util_js_1.SoStripUtil.needStrip(e.debugSymbol)?await stripNativeLibs(e):await copyFiles(e)}async function stripNativeLibs(e){if(void 0===e.strip)return;cleanStrippedSo(e.strippedNativeLibs,e.intermediatesProcessLibs),cleanSymbolicLink(path_1.default.resolve(e.strippedNativeLibs));let t=[],s=[];e.strip?(t=so_strip_util_js_1.SoStripUtil.filesExcluding(e.collectAllLibs,e.exclude,e.intermediatesProcessLibs),s=so_strip_util_js_1.SoStripUtil.matchedFiles(e.collectAllLibs,e.exclude,e.intermediatesProcessLibs)):e.strip||(t=so_strip_util_js_1.SoStripUtil.matchedFiles(e.collectAllLibs,e.exclude,e.intermediatesProcessLibs),s=so_strip_util_js_1.SoStripUtil.filesExcluding(e.collectAllLibs,e.exclude,e.intermediatesProcessLibs));const i=await readCache(e),r=t.map((async t=>{const s=path_1.default.resolve(e.intermediatesProcessLibs,t);if(!fs_extra_1.default.lstatSync(s).isDirectory())return fs_extra_1.default.existsSync(s)&&fs_extra_1.default.lstatSync(s).isSymbolicLink()?copySoFile(t,e):await needStripCache(e,t,i)?executeStrip(t,e):void 0})),a=s.map((async t=>copySoFile(t,e)));await Promise.all([...r,...a])}async function copyFiles(e){logger.debug("Do not need strip, copying .so files to stripped_native_libs"),cleanStrippedSo(e.strippedNativeLibs,e.intermediatesProcessLibs),cleanSymbolicLink(e.strippedNativeLibs);const t=glob_1.glob.sync(!0===e.collectAllLibs?common_const_js_1.NativeConst.LIBRARY_ALL_FILE_PATTERN:common_const_js_1.NativeConst.LIBRARY_FILE_PATTERN,{cwd:e.intermediatesProcessLibs}).map((async t=>{const s=path_1.default.resolve(e.strippedNativeLibs,t),i=path_1.default.resolve(e.intermediatesProcessLibs,t);fs_extra_1.default.lstatSync(i).isDirectory()||await file_util_js_1.FileUtil.linkFile(i,s)}));await Promise.all(t)}async function readCache(e){const t=fs_extra_1.default.existsSync(e.lastCache)?e.lastCache:e.cacheFilePath;return fs_extra_1.default.existsSync(t)?JSON.parse(await fs_extra_1.default.readFile(t,{encoding:"utf-8"})):{libs:{},stripped:{}}}function needStripCache(e,t,s){return libs_file_cache_util_js_1.LibsFileCacheUtil.isSourceChanged(e,path_1.default.resolve(e.intermediatesProcessLibs,t),s,e.intermediatesProcessLibs,e.debugSymbol)||libs_file_cache_util_js_1.LibsFileCacheUtil.isSinkChanged(path_1.default.resolve(e.strippedNativeLibs,t),s)}function cleanStrippedSo(e,t){if(!fs_extra_1.default.existsSync(e))return;function s(e){return fs_extra_1.default.readdirSync(e).reduce(((t,i)=>{const r=path_1.default.resolve(e,i);if(!fs_extra_1.default.existsSync(r))return t;return fs_extra_1.default.lstatSync(r).isDirectory()?t.concat(s(r)):t.concat(r)}),[])}const i=s(e),r=new Set(s(t).map((e=>path_1.default.relative(t,e))));i.filter((t=>{const s=path_1.default.relative(e,t);return!r.has(s)})).forEach((e=>{try{fs_extra_1.default.unlinkSync(e)}catch(t){logger.error(`delete filePath: ${e} has error: ${t}`)}}))}function cleanSymbolicLink(e){if(!fs_extra_1.default.existsSync(e))return;const t=fs_extra_1.default.lstatSync(e);t.isSymbolicLink()?fs_extra_1.default.removeSync(e):t.isDirectory()&&fs_extra_1.default.readdirSync(e).forEach((t=>{cleanSymbolicLink(path_1.default.resolve(e,t))}))}async function copySoFile(e,t){const s=path_1.default.resolve(t.strippedNativeLibs,e),i=path_1.default.resolve(t.intermediatesProcessLibs,e);fs_extra_1.default.lstatSync(i).isDirectory()||fs_extra_1.default.copy(i,s,{overwrite:!0,recursive:!0},(e=>e&&logger.errorMessageExit(`copy the file from ${i} to ${s} error: ${e.message}`)))}async function executeStrip(e,t){const s=path_1.default.resolve(t.strippedNativeLibs,e);fs_extra_1.default.ensureDirSync(path_1.default.dirname(s));const i=new LlvmCommandBuild(t.sdkLlvmStripPath).addSourceFilePath(path_1.default.resolve(t.intermediatesProcessLibs,e)).addOutputFilePath(s).build();try{await new process_utils_js_1.ProcessUtils(t.moduleName,t.taskName).execute(i)}catch(s){return logger.warn(s),copySoFile(e,t)}}exports.strip=strip,exports.cleanStrippedSo=cleanStrippedSo,exports.cleanSymbolicLink=cleanSymbolicLink;class LlvmCommandBuild extends base_command_builder_js_1.BaseCommandBuilder{constructor(e){super([]),this.commandList.push(e)}addOutputFilePath(e){return this.commandList.push(`-o${e}`),this}addSourceFilePath(e){return this.commandList.push(`${e}`),this}}