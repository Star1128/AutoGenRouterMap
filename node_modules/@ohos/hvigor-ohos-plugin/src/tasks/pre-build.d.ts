import { FileSet, TaskInputValue } from '@ohos/hvigor';
import { JsonProfile } from '../model/json-profile.js';
import { AbstractPreBuild } from './abstract/abstract-pre-build.js';
import { TargetTaskService } from './service/target-task-service.js';
/**
 * preBuild Task
 *
 * @since 2022/1/10
 */
export declare class PreBuild extends AbstractPreBuild {
    private readonly appJson5Path;
    private readonly insightIntentJsonPath;
    private readonly arkDataPath;
    private readonly utdPath;
    private readonly hvigorConfigPath;
    private readonly targetJsonPath;
    private readonly targetModuleOptObj;
    private readonly resourcePath;
    private readonly pagesJsonPath;
    private readonly formJsonPathArr;
    private readonly appStartupPath;
    private readonly routerMapJsonPath;
    protected isPreview: boolean | undefined;
    private readonly extendSourceValidateResult;
    private readonly INSIGHT_INTENT_SRC_ENTRY;
    private readonly MODULE_SRC_ENTRY;
    private readonly MODULE_ABILITIES_SRC_ENTRY;
    private readonly MODULE_EXTENSION_ABILITIES_SRC_ENTRY;
    declareInputs(): Map<string, TaskInputValue>;
    declareInputFiles(): FileSet;
    constructor(taskService: TargetTaskService);
    protected doValidateForDiffApiType(): void;
    /**
     * 当存在.preview缓存时移动mock-config.json5配置文件，需要删除.preview中mock-config缓存文件
     * @protected
     */
    protected mockCacheClean(): void;
    protected targetESVerisonValidate(): void;
    /**
     * 对compileSdkVersion和compatibleSdkVersion进行校验，对runtimeOS进行校验
     *
     * @protected
     */
    protected buildProfileJsonValidate(): void;
    /**
     * insight_intent.json文件校验
     *
     * @protected
     */
    protected insightIntentJsonValidate(): void;
    protected utdJsonValidate(utdFilePath: string): void;
    protected arkDataJsonValidate(arkDataFilePath: string): void;
    protected appJson5Validate(): void;
    private validateModuleSrcEntry;
    protected moduleJson5Validate(): void;
    private formJsonValidate;
    beforeAlwaysAction(): Promise<void>;
    private checkEntryModuleJson;
    /**
     * hap: src/main/resources/base/profile/main_pages.json
     * hsp: src/main/resources/base/profile/main_pages.json
     * har: undefined
     * ohosTest: src/ohosTest/resources/base/profile/test_pages.json
     *
     * @private
     */
    private getPagesJsonPath;
    private pagesJsonValidate;
    /**
     * routerMap.json文件schema校验
     * @private
     */
    private routerMapJsonValidate;
    /**
     * appStartup.json文件schema校验
     * @private
     */
    private appStartupValidate;
    private hvigorConfigValidate;
    /**
     * 1. validate form file is under current module
     * 2. validate form file exists
     *
     * @param formJsonPath string
     */
    private validateFormSrc;
    private validateMainElementAndAbilities;
    /**
     * AtomicService相关校验
     *
     * @private
     */
    validateAtomicService(): void;
    /**
     * 获取元服务校验报错文件路径
     *
     * @param bundleType  app.json5-bundleType
     * @param installationFree  module.json5-installationFree
     * @private
     */
    private getAtomicServiceErrorPath;
    /**
     * 指定bundleType和installationFree字段校验
     *
     * @param bundleType  app.json5-bundleType
     * @param installationFree  module.json5-installationFree
     * @param cause cause
     * @private
     */
    private validateSpecificField;
    private validateMockConfig;
    /**
     * 校验dynamicImport配置中文件配置
     * 仅检查包名是否为本模块oh-package.json5中dependencies的子集;相对路径通过schema校验,且同时检查文件是否存在
     * @private
     */
    private checkDynamicImportFile;
    /**
     * appStartup配置业务校验
     * @private
     */
    private checkAppStartupConfig;
    /**
     * 校验启动框架任务对象集合中对象名称唯一
     * @private
     * @param startupTaskObjList
     */
    private checkStartupTaskName;
    /**
     * 1.srcEntry校验
     * 2.configEntry校验
     * 文件必须真实存在;指向文件必须以ets,ts,js后缀结尾
     * @param appStartupPath
     * @param entryPath
     * @private
     */
    private checkStartupPath;
    protected getJsonProfileByModel(): JsonProfile;
    private hvigorFileConfigValidate;
    /**
     * 检查当前工程的OHMURL解析方式依赖的hsp包是否支持
     *
     * @private
     */
    private checkOHMURL;
    /**
     * 判断OHMUrl是否一致，如果是本地模块默认一致，如果是非本地模块则需要判断一致性，只对hsp模块进行判断
     *
     * @param dependency
     * @param currentOHMUrl
     * @private
     */
    private isEqualOHMUrl;
    private getExtendSourceDirsValidateResult;
    protected checkExtendSourceDirs(): void;
    /**
     * 如果integratedHsp字段hap中配置了则warn告警
     * 如果配置了integratedHsp为true但是useNormalizedOHMUrl为false或者没有配置的话，error报错
     *
     * @private
     */
    private checkIntegratedHspHsp;
    /**
     *  校验配置的transformLib是否合法
     *
     */
    private checkTransformLib;
    private checkTransformLibFileType;
    /**
     * 校验如"routerMap":"$profile:xxx"等资源引用方式的配置,若对应文件不存在则报错
     * @param configField
     * @private
     */
    private checkResReferenceConfig;
    /**
     * 检查所有srcEntry字段是否以相对路径的形式配置
     * @private
     */
    private checkAllSrcEntry;
}
export interface FrameworkConfigurationOpt {
    frameworkType: string;
}
