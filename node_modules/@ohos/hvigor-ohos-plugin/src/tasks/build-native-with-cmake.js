"use strict";var __importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.BuildNativeWithCmake=void 0;const hvigor_1=require("@ohos/hvigor"),fs_extra_1=__importDefault(require("fs-extra")),os_1=__importDefault(require("os")),path_1=__importDefault(require("path")),native_command_builder_js_1=require("../builder/native-command-builder.js"),common_const_js_1=require("../const/common-const.js"),hvigor_native_build_js_1=require("../model/cxx/hvigor-native-build.js"),cmake_invalidation_state_js_1=require("../utils/cmake-invalidation-state.js"),cmake_util_js_1=require("../utils/cmake-util.js"),file_util_js_1=require("../utils/file-util.js"),ohos_logger_js_1=require("../utils/log/ohos-logger.js"),task_names_js_1=require("./common/task-names.js"),legacy_pre_build_js_1=require("./legacy-tasks/legacy-pre-build.js"),abstract_build_native_js_1=require("./abstract-build-native.js"),pre_build_js_1=require("./pre-build.js");var Task=task_names_js_1.TaskNames.Task;class BuildNativeWithCmake extends abstract_build_native_js_1.AbstractBuildNative{constructor(t){super(t,Task.BUILD_NATIVE_WITH_CMAKE),this._log=ohos_logger_js_1.OhosLogger.getLogger(BuildNativeWithCmake.name),this._moduleDir=this.moduleModel.getProjectDir()}initTaskDepends(){this.declareDepends(this.isFaMode?legacy_pre_build_js_1.LegacyPreBuild.name:pre_build_js_1.PreBuild.name)}taskShouldDo(){return cmake_util_js_1.CmakeUtil.nativeTaskCondition(this.moduleModel,this.targetData,this._nativeOption)}async doTaskAction(){var t;if(file_util_js_1.FileUtil.checkDirWithoutDelete(this.pathInfo.getModuleBuildPath()),file_util_js_1.FileUtil.checkDirWithoutDelete(this.pathInfo.getCppOutputDir()),void 0!==this._nativeOption){let t=this._nativeOption.path;void 0===t&&(t="./src/main/cpp/CMakeLists.txt",this._log.warn(`The path of the cmake script in externalNativeOptions is empty. Use the default path ${t}.`))}const e=cmake_util_js_1.CmakeUtil.checkAbiFilters(null===(t=this._nativeOption)||void 0===t?void 0:t.abiFilters,this.targetData.isHarmonyOS(),this.moduleModel);for(const t of e){const e=`generate CMake command with ABI of ${t}`,i=this.durationEvent.createSubEvent(e,"");i.start();const a=path_1.default.resolve(this.pathInfo.getNinjaWorkDir(),t),s=this.buildCommand(t),o=path_1.default.resolve(a,"metadata_generation_command.txt"),l=s.join(os_1.default.EOL);if(fs_extra_1.default.existsSync(o)){await fs_extra_1.default.readFile(o,{encoding:"utf-8"})!==l&&await fs_extra_1.default.writeFile(o,l)}else await fs_extra_1.default.mkdir(path_1.default.dirname(o),{recursive:!0}),await fs_extra_1.default.writeFile(o,l);i.stop(),i.setLog(e,hvigor_1.MetricLogType.INFO);const r=`submit CMake task to work pool with ABI of ${t}`,n=this.durationEvent.createSubEvent(r,"");n.start();const _=path_1.default.resolve(a,"configure_fingerprint.json"),d=await(0,cmake_invalidation_state_js_1.createInvalidationState)(cmake_invalidation_state_js_1.FileId.getInstance(_),await this.getInputFiles(a,t),this.getRequiredOutputFiles(a),this.getOptionalOutputFiles(a),this.getHardOutputFiles(a));if(d.shouldConfigure()){d.softConfigureOkay()||(this._log.debug("Clean CMakeCache.txt due to outdated CMake configuration."),await fs_extra_1.default.rm(path_1.default.resolve(a,"CMakeCache.txt"),{recursive:!0,force:!0}));const e=async()=>{var e,i;const s=(0,cmake_invalidation_state_js_1.readCMakeFileApiReply)(a,this.targetName,t,this.sdkInfo.getCmakeTool()),o=null!==(i=null===(e=s.extra)||void 0===e?void 0:e.join(os_1.default.EOL))&&void 0!==i?i:"";await fs_extra_1.default.writeFile(path_1.default.resolve(a,"additional_project_files.txt"),o),await fs_extra_1.default.writeFile(path_1.default.resolve(a,"native_work_dir.txt"),a),await fs_extra_1.default.writeFile(path_1.default.resolve(a,"build_file_index.txt"),s.buildFiles.join(os_1.default.EOL)),delete s.extra,await fs_extra_1.default.writeJSON(path_1.default.resolve(a,hvigor_native_build_js_1.HvigorNativeConfigFile),s),d.addInputFiles(await this.getInputFiles(a,t)),await d.updateFingerPrint(),n.stop(),n.setLog(r,hvigor_1.MetricLogType.INFO)};d.shouldConfigureMessages().forEach((t=>this._log.debug(t))),cmake_util_js_1.CmakeUtil.mkCodeModelRequest(a),await this.executeCommand(s,a,e,[],n)}else this._log.debug("CMake configuration was up-to-date"),await d.updateFingerPrint(),n.stop(),n.setLog(r,hvigor_1.MetricLogType.INFO)}}async getInputFiles(t,e){const i=new Set;i.add(path_1.default.resolve(cmake_util_js_1.CmakeUtil.getCmakeListDir(this._moduleDir,this._nativeOption),"CMakeLists.txt")),file_util_js_1.FileUtil.getAllFilesFromFolder(path_1.default.resolve(this.pathInfo.getNinjaWorkDir(),"hvigor",e)).forEach((t=>i.add(t)));const a=path_1.default.resolve(t,hvigor_native_build_js_1.HvigorNativeConfigFile);if(!fs_extra_1.default.existsSync(a))return[...i].map((t=>cmake_invalidation_state_js_1.FileId.getInstance(t)));const s=await(0,hvigor_native_build_js_1.readHvigorNativeConfigFile)(a);return null==s||s.buildFiles.forEach((t=>i.add(t))),[...i].map((t=>cmake_invalidation_state_js_1.FileId.getInstance(t)))}getOptionalOutputFiles(t){return[path_1.default.resolve(t,"build.ninja"),path_1.default.resolve(t,"compile_commands.json"),path_1.default.resolve(t,"native_work_dir.txt"),path_1.default.resolve(t,"build_file_index.txt"),path_1.default.resolve(t,"additional_project_files.txt")].map((t=>cmake_invalidation_state_js_1.FileId.getInstance(t)))}getRequiredOutputFiles(t){return[path_1.default.resolve(t,hvigor_native_build_js_1.HvigorNativeConfigFile),path_1.default.resolve(t,"CMakeCache.txt")].map((t=>cmake_invalidation_state_js_1.FileId.getInstance(t)))}getHardOutputFiles(t){return[path_1.default.resolve(t,"metadata_generation_command.txt")].map((t=>cmake_invalidation_state_js_1.FileId.getInstance(t)))}getToolchainFile(t,e){let i="";return t===common_const_js_1.CommonConst.BISHENG?(e||this._log.warn("Unknown compiler BiSheng, The runtimeOS that supports the BiSheng can only be HarmonyOS"),i=e?this.sdkInfo.getHmsBiShengToolchainFile():this.sdkInfo.getNativeToolchain()):i=e?this.sdkInfo.getHmsToolchainFile():this.sdkInfo.getNativeToolchain(),fs_extra_1.default.existsSync(i)||(this._log.warn(`Cannot find the file under the specified path ${i}`),i=fs_extra_1.default.existsSync(this.sdkInfo.getHmsToolchainFile())?this.sdkInfo.getHmsToolchainFile():this.sdkInfo.getNativeToolchain()),i}buildCommand(t){var e,i,a;const s=new native_command_builder_js_1.NativeCommandBuilder(this.sdkInfo.getCmakeTool()),o=path_1.default.resolve(this.pathInfo.getIntermediatesCppOutPut(),t),l=path_1.default.resolve(this.pathInfo.getNinjaWorkDir(),t),r=path_1.default.resolve(this.pathInfo.getNinjaWorkDir(),"hvigor",t),n=this.targetService.getBuildMode(),_=this.targetData.isHarmonyOS()&&this.compileApiVersion>9,d=null===(e=this.targetService.getBuildOption())||void 0===e?void 0:e.nativeCompiler,u=this.getToolchainFile(d,_);s.addCmakeList(cmake_util_js_1.CmakeUtil.getCmakeListDir(this._moduleDir,this._nativeOption)).addTempFilePath(l).addOhosArch(t).addOutputDir(o).addBuildType(n).addNativeSdk(this.sdkInfo.getSdkNativeDir()).addSystemName("OHOS").addOhosArchAbi(t).exportCompileCommands("ON").addToolChain(u).addGenerator("Ninja").addMakeProgramPath(this.sdkInfo.getNativeNinjaTool()).addCMakeFindPath(r).addPackageFindScript(path_1.default.resolve(r,common_const_js_1.NativeConst.PACKAGE_SUMMARY_FILE)).muteUnusedCliWarn();const h=null===(i=this._nativeOption)||void 0===i?void 0:i.cFlags,g=null===(a=this._nativeOption)||void 0===a?void 0:a.cppFlags;h&&""!==h.trim()&&s.addCFlags(h),g&&""!==g.trim()&&s.addCxxFlags(g),_&&s.addHMosNativeSdk(this.sdkInfo.getHmsNativeDir());const v=this.addNativeArgs();let c=s.build();return c=cmake_util_js_1.CmakeUtil.mergeCommandLine(c,v),this._log._printDebugCommand("Cmake",c),c}addNativeArgs(){var t,e;let i=(null===(t=this._nativeOption)||void 0===t?void 0:t.arguments)?null===(e=this._nativeOption)||void 0===e?void 0:e.arguments:"";return"true"===hvigor_1.hvigorCore.getExtraConfig().get("ohos-debug-asan")&&(i+=" -DOHOS_ENABLE_ASAN=ON "),"true"===hvigor_1.hvigorCore.getExtraConfig().get("ohos-enable-tsan")&&(i+=" -DOHOS_ENABLE_TSAN=ON "),i}}exports.BuildNativeWithCmake=BuildNativeWithCmake;