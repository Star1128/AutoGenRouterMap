"use strict";function getIntersection(e,t){return e.filter((function(e){return t.indexOf(e)>-1}))}function getElementFromArr(e,t,r="name"){if(void 0!==e)for(const n of e)if(n[r]===t)return n}function findDuplicateElement(e){const t=new Set,r=new Set;return e.forEach((e=>{r.has(e)?t.add(e):r.add(e)})),[...t]}function checkArrayIsSame(e,t){if(e.length===t.length){for(let r=0;r<e.length;r++)if(e[r]!==t[r])return!1;return!0}return!1}function checkArrayElementIsSame(e,t){return e.length===t.length&&JSON.stringify(e.sort())===JSON.stringify(t.sort())}function isSubset(e,t){return t.every((t=>e.includes(t)))}function complementarySet(e,t){return e.filter((e=>!t.includes(e)))}function checkIntersection(e,t){return!(!e||!t)&&e.filter((e=>t.includes(e))).length>0}function getUnionSet(e=[],t=[]){return Array.from(new Set([...e,...t]))}function getIntersectedSet(e,t){if(!e||!t)return new Set;const r=Array.from(e).filter((e=>t.has(e)));return new Set(r)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.getIntersectedSet=exports.getUnionSet=exports.checkIntersection=exports.complementarySet=exports.isSubset=exports.checkArrayElementIsSame=exports.checkArrayIsSame=exports.findDuplicateElement=exports.getElementFromArr=exports.getIntersection=void 0,exports.getIntersection=getIntersection,exports.getElementFromArr=getElementFromArr,exports.findDuplicateElement=findDuplicateElement,exports.checkArrayIsSame=checkArrayIsSame,exports.checkArrayElementIsSame=checkArrayElementIsSame,exports.isSubset=isSubset,exports.complementarySet=complementarySet,exports.checkIntersection=checkIntersection,exports.getUnionSet=getUnionSet,exports.getIntersectedSet=getIntersectedSet;