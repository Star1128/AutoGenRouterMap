"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.FileChangeType=exports.ConfigureType=exports.ChangeFile=exports.FileId=exports.InvalidationStateBuilder=exports.readCMakeFileApiReply=exports.readFingerPrintFile=exports.createInvalidationState=void 0;const fs_extra_1=__importDefault(require("fs-extra")),path_1=__importDefault(require("path")),generate_codemodel_js_1=require("../model/cxx/generate-codemodel.js"),ohos_logger_js_1=require("./log/ohos-logger.js"),cmake_util_js_1=require("./cmake-util.js"),_log=ohos_logger_js_1.OhosLogger.getLogger("NativeInvalidation"),createInvalidationState=async(e,t,i,s,a)=>{const r=InvalidationStateBuilder.newBuilder().addInputFiles(t).addRequiredOutputFiles(i).addOptionalOutputFiles(s).addHardOutputFiles(a).setLastFingerPrint(e),n=await(0,exports.readFingerPrintFile)(e.path);if(!n)return r.setConfigureType(ConfigureType.HARD_CONFIGURE).setFingerPrintFileExisted(!1).build();const l=n.map((e=>e.compareToCurrent())),o=l.filter((e=>e.type===FileChangeType.UNCHANGED)),h=l.filter((e=>e.type!==FileChangeType.UNCHANGED)),u=(t,i=!0)=>computeChangedFiles(h,o,t,e.lastModified,i),p=u(t,!1),d=u(i),g=u(s,!1),F=u(a),C=p.concat(d,g),f=F.length>0?ConfigureType.HARD_CONFIGURE:C.length>0?ConfigureType.SOFT_CONFIGURE:ConfigureType.NO_CONFIGURE,c=n.map((e=>e.compareToCurrent()));for(const e of c){const t=h.find((t=>t.path===e.path));if(t&&t.type!==e.type)return _log.debug(`File ${e.path} was modified during checks for C/C++ configuration invalidation.`),r.setFingerPrintFileExisted(!0).setConfigureType(f).build()}return r.setFingerPrintFileExisted(!0).addAllChangesToFingerPrintFiles(h).addAllUnchangedFingerPrintFiles(o).addAllSoftChanges(C).addAllHardChanges(F).setConfigureType(f)};exports.createInvalidationState=createInvalidationState;const computeChangedFiles=(e,t,i,s,a=!0)=>i.map((i=>{const r=e.find((e=>e.path===i.path));return r?new ChangeFile(i.path,r.type):t.find((e=>e.path===i.path))?new ChangeFile(i.path,FileChangeType.UNCHANGED):a&&!i.exist?new ChangeFile(i.path,FileChangeType.DELETED):i.lastModified>=s?new ChangeFile(i.path,FileChangeType.LAST_MODIFIED_CHANGED):i.exist?new ChangeFile(i.path,FileChangeType.CREATED):new ChangeFile(i.path,FileChangeType.UNCHANGED)})).filter((e=>e.type!==FileChangeType.UNCHANGED)),readFingerPrintFile=async e=>{if(!fs_extra_1.default.existsSync(e))return;return(await fs_extra_1.default.readJSON(e)).files.map((e=>Object.setPrototypeOf(e,FileId.prototype)))};exports.readFingerPrintFile=readFingerPrintFile;const readCMakeFileApiReply=(e,t,i,s)=>{var a,r;const n=new generate_codemodel_js_1.GenerateCodemodel(e),l=n.getObjFromIndex("cmakeFiles"),o=cmake_util_js_1.CmakeUtil.parseLibraries(e,t,i);let h=[];const u=[];if(l){const e=l.paths.build,t=l.paths.source;h=l.inputs.map((e=>path_1.default.resolve(t,e.path))).filter((i=>"cmakelists.txt"===path_1.default.basename(i).toLowerCase()||i.toLowerCase().startsWith(t.toLowerCase())&&!i.toLowerCase().startsWith(e.toLowerCase())&&(i.toLowerCase().endsWith(".cmake.in")||i.toLowerCase().endsWith(".cmake")))).sort();for(const e of o.values())null===(a=e.getFiles())||void 0===a||a.forEach((e=>u.push(path_1.default.resolve(t,e))))}const p={};for(const e of o.values())p[e.id]={toolchain:"toolchain",abi:e.getAbi(),artifactName:e.getArtifactName(),output:null===(r=e.getOutputs())||void 0===r?void 0:r.shift(),runtimeFiles:e.getRuntimeFiles()};const d={buildFiles:h,libraries:p,cleanCommands:[],buildCommands:[],toolchain:{cCompilerExecutable:"",cppCompilerExecutable:""},extra:u},g=n.getObjFromIndex("cache");if(g){const e=g.entries.find((e=>"CMAKE_LINKER"===e.name));if(e){const t=path_1.default.extname(e.value),i=path_1.default.dirname(e.value);d.toolchain.cCompilerExecutable=path_1.default.resolve(i,`clang${t}`),d.toolchain.cppCompilerExecutable=path_1.default.resolve(i,`clang++${t}`)}}return d};exports.readCMakeFileApiReply=readCMakeFileApiReply;class InvalidationStateBuilder{constructor(){this.inputFiles=[],this.requiredOutputFiles=[],this.optionalOutputFiles=[],this.hardOutputFiles=[],this.changesToFingerPrintFiles=[],this.unchangedFingerPrintFiles=[],this.configureType=ConfigureType.SOFT_CONFIGURE,this.softConfigureReasons=[],this.hardConfigureReasons=[],this.fingerPrintFileExisted=!1}static newBuilder(){return new InvalidationStateBuilder}async updateFingerPrint(){const e=[...this.inputFiles,...this.requiredOutputFiles,...this.optionalOutputFiles,...this.hardOutputFiles].map((e=>e.update())).sort();this.lastFingerPrint&&(fs_extra_1.default.existsSync(this.lastFingerPrint.path)&&await fs_extra_1.default.rm(this.lastFingerPrint.path),await fs_extra_1.default.writeJSON(this.lastFingerPrint.path,{files:e,version:1}))}addAllChangesToFingerPrintFiles(e){return this.changesToFingerPrintFiles.push(...e),this}addAllUnchangedFingerPrintFiles(e){return this.unchangedFingerPrintFiles.push(...e),this}setConfigureType(e){return this.configureType=e,this}addAllSoftChanges(e){return this.softConfigureReasons.push(...e),this}addAllHardChanges(e){return this.hardConfigureReasons.push(...e),this}setFingerPrintFileExisted(e){return this.fingerPrintFileExisted=e,this}build(){return this}setLastFingerPrint(e){return this.lastFingerPrint=e,this}addInputFiles(e){return this.inputFiles=e,this}getInputFile(){return this.inputFiles}addRequiredOutputFiles(e){return this.requiredOutputFiles.push(...e),this}getRequiredOutputFiles(){return this.requiredOutputFiles}addOptionalOutputFiles(e){return this.optionalOutputFiles.push(...e),this}getOptionalOutputFiles(){return this.optionalOutputFiles}addHardOutputFiles(e){return this.hardOutputFiles.push(...e),this}getHardOutputFiles(){return this.hardOutputFiles}shouldConfigureMessages(){const e=[],t=this.configureType===ConfigureType.SOFT_CONFIGURE?"":", will remove stale cache CMakeCache.txt";return this.fingerPrintFileExisted?this.hardConfigureReasons.length>0?(e.push(`- a hard configure file changed${t}`),this.hardConfigureReasons.forEach((t=>e.push(`  - ${t.path} (${changeTypeToStr(t.type)})`))),e):this.softConfigureReasons.length>0?(e.push(`- a file changed${t}`),this.softConfigureReasons.forEach((t=>e.push(`  - ${t.path} (${changeTypeToStr(t.type)})`))),e):e:(e.push(`- no fingerprint file${t}`),e)}shouldConfigure(){return this.configureType===ConfigureType.HARD_CONFIGURE||this.configureType===ConfigureType.SOFT_CONFIGURE}softConfigureOkay(){return this.configureType===ConfigureType.SOFT_CONFIGURE}}exports.InvalidationStateBuilder=InvalidationStateBuilder;class FileId{constructor(e,t,i,s){if(this.exist=!1,this.path=e,t&&i)return this.size=t,this.lastModified=i,void(this.exist=void 0===s?fs_extra_1.default.existsSync(e):s);if(fs_extra_1.default.existsSync(this.path)){const e=fs_extra_1.default.statSync(this.path);this.size=null!=t?t:e.size,this.lastModified=null!=i?i:e.mtimeMs,this.exist=fs_extra_1.default.existsSync(this.path)}else this.size=-1,this.lastModified=-1}static getInstance(e,t,i,s){return new FileId(e,t,i,s)}compareToCurrent(){const e=FileId.getInstance(this.path);return this.compareTo(e)}compareTo(e){return this.exist&&!e.exist?new ChangeFile(this.path,FileChangeType.DELETED):!this.exist&&e.exist?new ChangeFile(this.path,FileChangeType.CREATED):this.lastModified!==e.lastModified?new ChangeFile(this.path,FileChangeType.LAST_MODIFIED_CHANGED):this.size!==e.size?new ChangeFile(this.path,FileChangeType.LENGTH_CHANGED):new ChangeFile(this.path,FileChangeType.UNCHANGED)}update(){if(!fs_extra_1.default.existsSync(this.path))return this.exist=!1,this;const e=fs_extra_1.default.statSync(this.path);return this.size=e.size,this.lastModified=e.mtimeMs,this.exist=!0,this}}exports.FileId=FileId;class ChangeFile{constructor(e,t){this.path=e,this.type=t}}var ConfigureType,FileChangeType;exports.ChangeFile=ChangeFile,function(e){e[e.UNKNOWN_CONFIGURE_TYPE=0]="UNKNOWN_CONFIGURE_TYPE",e[e.NO_CONFIGURE=1]="NO_CONFIGURE",e[e.SOFT_CONFIGURE=2]="SOFT_CONFIGURE",e[e.HARD_CONFIGURE=3]="HARD_CONFIGURE",e[e.UNRECOGNIZED=4]="UNRECOGNIZED"}(ConfigureType=exports.ConfigureType||(exports.ConfigureType={})),function(e){e[e.UNKNOWN=0]="UNKNOWN",e[e.CREATED=1]="CREATED",e[e.DELETED=2]="DELETED",e[e.LAST_MODIFIED_CHANGED=3]="LAST_MODIFIED_CHANGED",e[e.LENGTH_CHANGED=4]="LENGTH_CHANGED",e[e.UNCHANGED=-1]="UNCHANGED"}(FileChangeType=exports.FileChangeType||(exports.FileChangeType={}));const changeTypeToStr=e=>{switch(e){case FileChangeType.CREATED:return"CREATED";case FileChangeType.DELETED:return"DELETED";case FileChangeType.LENGTH_CHANGED:return"LENGTH_CHANGED";case FileChangeType.LAST_MODIFIED_CHANGED:return"LAST_MODIFIED_CHANGED";case FileChangeType.UNCHANGED:return"UNCHANGED";case FileChangeType.UNKNOWN:default:return"UNKNOWN"}};