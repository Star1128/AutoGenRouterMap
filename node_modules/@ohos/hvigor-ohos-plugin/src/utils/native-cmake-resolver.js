"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.LibraryResolver=exports.ArchResolver=exports.PackageResolver=void 0;const fs_extra_1=__importDefault(require("fs-extra")),glob_1=require("glob"),os_1=__importDefault(require("os")),path_1=__importDefault(require("path")),common_const_js_1=require("../const/common-const.js"),cpu_abi_enum_js_1=require("../enum/cpu-abi-enum.js"),ohos_logger_js_1=require("./log/ohos-logger.js"),cmake_util_js_1=require("./cmake-util.js"),log=ohos_logger_js_1.OhosLogger.getLogger("ConfigureCmake");class PackageResolver{constructor(e,t,a,s){var i,r,l;this.archs=[],this.canonicalName=e.getPackageName(),this.name=this.canonicalName.replace(common_const_js_1.NativeConst.PACKAGE_NAME_REGEX,""),this.version=e.getDependencyVersion(),this.abiList=t,this.path=e.getDependencyRootPath(),this.cmakeDir=a,this.service=s,this.headerPath=this.getHeaderPath(e,s),this.libsPath=s?s.getTargetData().getPathInfo().getIntermediatesStrippedLibsDir():path_1.default.resolve(e.getDependencyRootPath(),"libs"),this.isHeaderAvailable=fs_extra_1.default.existsSync(this.headerPath)&&fs_extra_1.default.readdirSync(this.headerPath).length>0,this.matchRule=(null!==(l=null===(r=null===(i=null==s?void 0:s.getBuildOption().nativeLib)||void 0===i?void 0:i.filter)||void 0===r?void 0:r.select)&&void 0!==l?l:[]).find((e=>e.package===this.canonicalName&&e.version===this.version)),this.archs=this.abiList.map((e=>ArchResolver.getInstance(e,this)))}static getInstance(e,t,a,s){return new PackageResolver(e,t,a,s)}async build(){await Promise.all(this.archs.map((e=>e.build())))}getHeaderPath(e,t){var a;const s=null===(a=null==t?void 0:t.getBuildOption().nativeLib)||void 0===a?void 0:a.headerPath;return s?path_1.default.isAbsolute(s)?s:path_1.default.resolve(e.getDependencyRootPath(),s):path_1.default.resolve(e.getDependencyRootPath(),common_const_js_1.NativeConst.INCLUDE_DIR)}}exports.PackageResolver=PackageResolver;class ArchResolver{constructor(e,t){this.libraries=[],this.cmakeText="",this.arch=e,this.pkg=t,this.path=path_1.default.resolve(this.pkg.libsPath,e),this.cmakeFile=path_1.default.resolve(t.cmakeDir,e,"lib",cpu_abi_enum_js_1.CpuAbiEnum.getCpuType(e),"cmake",t.name,`${t.name}Config.cmake`)}static getInstance(e,t){return new ArchResolver(e,t)}async build(){if(this.libraries=await this.calLibraries(),this.cmakeText=this.libraries.map((e=>e.text)).join(os_1.default.EOL),!fs_extra_1.default.existsSync(this.cmakeFile))return await fs_extra_1.default.ensureDir(path_1.default.dirname(this.cmakeFile)),await fs_extra_1.default.writeFile(this.cmakeFile,this.cmakeText),this;return await fs_extra_1.default.readFile(this.cmakeFile,{encoding:"utf8"})!==this.cmakeText&&(await fs_extra_1.default.rm(this.cmakeFile,{force:!0}),await fs_extra_1.default.writeFile(this.cmakeFile,this.cmakeText)),this}async calLibraries(){if(!this.pkg.service){if(fs_extra_1.default.existsSync(this.path)){log.debug(`Reading libs dir ${this.path}`);return glob_1.glob.sync(common_const_js_1.NativeConst.LIBRARY_FILE_PATTERN,{cwd:this.path}).filter((e=>path_1.default.basename(e)!==common_const_js_1.NativeConst.SHARED_STL_LIBRARY)).map((e=>LibraryResolver.getInstance(path_1.default.basename(e),path_1.default.resolve(this.path,e),this)))}return log.debug("No available libraries."),[]}const e=this.pkg.service.getTargetData(),t=e.getPathInfo().getNinjaWorkDir(),a=path_1.default.resolve(t,this.arch);if(log.debug(`Local module ${this.pkg.name}, reading cmake code model in ${a}.`),!fs_extra_1.default.existsSync(a))return log.warn(`not found cmake code model in ${a}`),[];const s=[...cmake_util_js_1.CmakeUtil.parseLibraries(a,e.getTargetName(),this.arch).values()].filter((e=>"STATIC_LIBRARY"===e.getType()||"SHARED_LIBRARY"===e.getType())),i=s.flatMap((e=>{var t;return null!==(t=e.getOutputs())&&void 0!==t?t:[]}));return this.pkg.service.getModuleService().getModuleModel().isHspModule()&&i.push(...s.flatMap((e=>{var t;return null!==(t=e.getRuntimeFiles())&&void 0!==t?t:[]}))),i.map((e=>path_1.default.isAbsolute(e)?e:path_1.default.resolve(t,this.arch,e))).filter((e=>e.includes(".so")||e.includes(".a"))).map((e=>LibraryResolver.getInstance(path_1.default.basename(e),path_1.default.resolve(e),this)))}}exports.ArchResolver=ArchResolver;class LibraryResolver{constructor(e,t,a){this.arch=a,this.nameOnDisk=e,this.name=this.tryGetLibraryName(),this.path=t,this.text=this.genPkgText()}static getInstance(e,t,a){return new LibraryResolver(e,t,a)}genPkgText(){const e=this.arch.pkg.matchRule;if(e&&e.exclude.includes(this.nameOnDisk))return os_1.default.EOL;const t=`${this.arch.pkg.name}::${this.name}`;let a=`if(NOT TARGET ${t})`;const s=this.nameOnDisk.includes(".a")?"STATIC":"SHARED";return a+=`${os_1.default.EOL}    add_library(${t} ${s} IMPORTED)`,a+=`${os_1.default.EOL}    set_target_properties(${t} PROPERTIES`,this.arch.pkg.isHeaderAvailable&&(a+=`${os_1.default.EOL}        INTERFACE_INCLUDE_DIRECTORIES "${this.arch.pkg.headerPath.replace(/\\/g,"/")}"`),a+=`${os_1.default.EOL}        IMPORTED_LOCATION "${this.path.replace(/\\/g,"/")}"`,a+=`)${os_1.default.EOL}endif()${os_1.default.EOL}`,a}tryGetLibraryName(){const e=this.nameOnDisk.lastIndexOf(".so")>-1?this.nameOnDisk.lastIndexOf(".so"):this.nameOnDisk.lastIndexOf(".a"),t=this.nameOnDisk.toLowerCase().startsWith("lib")?3:0;return e>-1?this.nameOnDisk.substring(t,e):this.nameOnDisk.substring(t)}}exports.LibraryResolver=LibraryResolver;