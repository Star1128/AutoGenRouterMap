"use strict";var __importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.LibsFileCacheUtil=void 0;const crypto_1=__importDefault(require("crypto")),fs_extra_1=__importDefault(require("fs-extra")),path_1=__importDefault(require("path")),so_strip_util_js_1=require("./so-strip-util.js");class LibsFileCacheUtil{static getFileHash(t){return crypto_1.default.createHash("md5").update(String(t.size+t.mtime.getTime())).digest("hex")}static async isSourceChanged(t,e,i,s,a){const r=path_1.default.relative(s,e),l=this.isStripped(t,i.debugSymbol,r,s);if(this.isStripped(t,a,r,s)!==l)return!0;const c=i.libs[e];return void 0===c||!fs_extra_1.default.existsSync(e)||c!==LibsFileCacheUtil.getFileHash(fs_extra_1.default.statSync(e))}static isStripped(t,e,i,s){const a=(null==e?void 0:e.strip)?so_strip_util_js_1.SoStripUtil.filesExcluding:so_strip_util_js_1.SoStripUtil.matchedFiles;return!!e&&a(t.collectAllLibs,e.exclude,s).some((t=>path_1.default.normalize(t)===path_1.default.normalize(i)))}static async isSinkChanged(t,e){const i=e.stripped[t];return void 0===i||!fs_extra_1.default.existsSync(t)||i!==LibsFileCacheUtil.getFileHash(fs_extra_1.default.statSync(t))}static async generateFileHashesForDirectory(t){if(!t||!path_1.default.isAbsolute(t))throw new Error(`Invalid ${t} path. It must be a non-empty absolute path.`);const e={};if(!fs_extra_1.default.existsSync(t))return e;return await async function t(i){const s=fs_extra_1.default.readdirSync(i);for(const a of s)try{const s=path_1.default.join(i,a),r=fs_extra_1.default.statSync(s);r.isDirectory()?await t(s):r.isFile()&&(e[s]=LibsFileCacheUtil.getFileHash(r))}catch(t){if(!(t instanceof Error&&"code"in t&&"ENOENT"===t.code))throw t}}(t),e}static async refreshLibsFileCache(t,e,i,s){const a={libs:fs_extra_1.default.existsSync(t)?await LibsFileCacheUtil.generateFileHashesForDirectory(t):{},stripped:fs_extra_1.default.existsSync(e)?await LibsFileCacheUtil.generateFileHashesForDirectory(e):{},debugSymbol:s};fs_extra_1.default.ensureDirSync(path_1.default.dirname(i)),await fs_extra_1.default.writeFile(i,JSON.stringify(a),"utf8")}}exports.LibsFileCacheUtil=LibsFileCacheUtil;