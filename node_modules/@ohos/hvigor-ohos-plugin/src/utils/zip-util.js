"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.ZipUtil=void 0;const fs_1=__importDefault(require("fs")),promises_1=__importDefault(require("fs/promises")),jszip_1=__importDefault(require("jszip")),path_1=__importDefault(require("path"));class ZipUtil{constructor(){this.BEGIN_TIME=1546272e6,this.zip=new jszip_1.default}async addFolder(e,t){const i=null!=t?t:this.zip,s=await promises_1.default.readdir(e);for(const t of s){const s=path_1.default.join(e,t);if((await promises_1.default.stat(s)).isDirectory()){const e=i.folder(t);null!==e&&await this.addFolder(s,e)}else i.file(t,promises_1.default.readFile(s))}return this}async addFile(e){return await this.zip.file(path_1.default.basename(e),promises_1.default.readFile(e)),this}async outputZip(e){this.zip.forEach(((e,t)=>{t.options.compression="STORE",t.date=new Date(this.BEGIN_TIME)})),await this.zip.generateAsync({type:"nodebuffer",streamFiles:!0,compression:"STORE"}).then((t=>promises_1.default.writeFile(e,t,"utf-8")))}static async extractZIP(e,t){await promises_1.default.mkdir(t,{recursive:!0});const i=new jszip_1.default,s=await i.loadAsync(promises_1.default.readFile(e));for(const e of Object.keys(s.files)){const i=path_1.default.resolve(t,e);if(s.files[e].dir)await promises_1.default.mkdir(i,{recursive:!0});else{const t=path_1.default.dirname(i);fs_1.default.existsSync(t)||await promises_1.default.mkdir(t,{recursive:!0}),await s.files[e].async("nodebuffer").then((e=>promises_1.default.writeFile(i,e)))}}}static async readFileInZIP(e,t){const i=new Map,s=new jszip_1.default,a=await s.loadAsync(promises_1.default.readFile(e));for(const e of Object.keys(a.files))if(t.includes(e)){const t=await a.files[e].async("nodebuffer");i.set(e,t.toString())}return i}}exports.ZipUtil=ZipUtil;