declare class OhPackageLoader {
    isUpdateOhPackageInfo: boolean;
    private isLoaded;
    ohModulesExistMap: Map<string, boolean>;
    OhPackagePathMap: Map<string, string>;
    private isChangeOhPackageJsonFile;
    UpdatePathToOriginMap: Map<string, string>;
    getDependenciesOpt(nodeOhPackagePath: string): any;
    clean(): void;
    getDevDependenciesOpt(nodeOhPackagePath: string): any;
    getDynamicDependenciesOpt(nodeOhPackagePath: string): any;
    setDependenciesOpt(nodeOhPackagePath: string, dependencies: any): void;
    setDevDependenciesOpt(nodeOhPackagePath: string, devDependencies: any): void;
    setDynamicDependenciesOpt(nodeOhPackagePath: string, dynamicDependencies: any): void;
    getVersion(nodeOhPackagePath: string): any;
    setVersion(nodeOhPackagePath: string, updateVersion: string): void;
    checkIfNeedOhpmInstall(): boolean;
    private getHashFromOhPackagePath;
    validOhModulesExistMap(): void;
    loadUpdatedOhPackageToDisk(targetName: string): void;
    getNodeOhPackagePath(path: string): string;
    private saveOhPackagePathInfoToLoader;
    private validateDependency;
    getOriginPathFromUpdatePath(paths: string[]): string[];
}
export interface DependencyMap {
    targetName: string | undefined;
    rootDependency: string;
    dependencyMap: Record<string, string>;
}
export declare const ohPackageLoader: OhPackageLoader;
export {};
