"use strict";var __importDefault=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.DecipherUtil=void 0;const buffer_1=__importDefault(require("buffer")),crypto_1=__importDefault(require("crypto")),fs_1=__importDefault(require("fs")),path_1=__importDefault(require("path")),ohos_logger_js_1=require("./log/ohos-logger.js");class DecipherUtil{static decryptPwd(r,e){32>e.length&&this._logger._buildError("Invalid data.")._solution("Make sure the values of storePassword and keyPassword in build-profile.json5 contain at least 32 characters.")._file(path_1.default.resolve(process.cwd(),"build-profile.json5"))._printErrorAndExit(),0!=e.length%2&&this._logger._buildError("Invalid password length.")._solution("Verify the settings of storePassword and keyPassword in build-profile.json5.")._file(path_1.default.resolve(process.cwd(),"build-profile.json5"))._printErrorAndExit();let t=buffer_1.default.Buffer.from("");try{const i=DecipherUtil.getKey(r),o=new Int8Array(buffer_1.default.Buffer.from(e,"hex"));t=DecipherUtil.decrypt(i,o)}catch(e){this._logger._buildError(e.message)._solution(`Signing failed. Reconfigure the signature or clear the ${r} folder and perform signing again.`)._file(path_1.default.resolve(process.cwd(),"build-profile.json5"))._callstack(e)._printErrorAndExit()}return t.toString("utf-8")}static getKey(r){const e=path_1.default.resolve(r,"material");fs_1.default.statSync(e).isDirectory()||this._logger._buildError("No signing materials.")._printErrorAndExit();const t=fs_1.default.readdirSync(e).filter((r=>r!=this.macDSStore));0===t.length&&this._logger._buildError("No signing materials.")._printErrorAndExit(),this.dirs.forEach((r=>{t.includes(r)||this._logger._buildError(`Can not find signing material ${r}`)._printErrorAndExit()}));const i=this.readFd(path_1.default.resolve(e,this.dirs[0])),o=this.readSalt(path_1.default.resolve(e,this.dirs[1])),a=this.getRootKey(i,o),s=this.readWorkMaterial(path_1.default.resolve(e,this.dirs[2]));return new Int8Array(DecipherUtil.decrypt(a,s))}static getRootKey(r,e){const t=r.concat(this.component),i=this.xorComponents(t),o=crypto_1.default.pbkdf2Sync(i.toString(),e,1e4,16,"sha256");return new Int8Array(o)}static decrypt(r,e){const t=(255&e[0])<<24|(255&e[1])<<16|(255&e[2])<<8|255&e[3],i=e.length-4-t,o=e.slice(4,4+i),a=crypto_1.default.createDecipheriv("aes-128-gcm",r,o),s=e.slice(e.length-16);a.setAuthTag(s);const l=a.update(e.subarray(4+i,e.length-16)),n=a.final();return buffer_1.default.Buffer.concat([l,n])}static xorComponents(r){r.forEach((r=>{16!==r.length&&this._logger._buildError("Signing material data error!")._printErrorAndExit()}));let e=this.xor(r[0],r[1]);for(let t=2;t<r.length;t++)e=this.xor(e,r[t]);return buffer_1.default.Buffer.from(e)}static xor(r,e){r.byteLength!==e.byteLength&&this._logger._buildError("Signing material data error!")._printErrorAndExit();const t=new Int8Array(r.byteLength);for(let i=0;i<r.byteLength;i++)t[i]=r[i]^e[i];return t}static readFd(r){fs_1.default.existsSync(r)||this._logger._buildError("Material not found!")._printErrorAndExit();const e=fs_1.default.readdirSync(r).filter((r=>r!=this.macDSStore));3!==e.length&&this._logger._buildError("Signing material is illegal!")._printErrorAndExit();const t=[];return e.forEach((e=>t.push(this.readDirBytes(path_1.default.resolve(r,e))))),t}static readSalt(r){return this.readDirBytes(r)}static readWorkMaterial(r){return this.readDirBytes(r)}static decryptPluginDataFromResource(r){const e=path_1.default.resolve(__dirname,r),t=fs_1.default.readFileSync(e).toString();return DecipherUtil.decryptPwd(path_1.default.resolve(__dirname,"../../res"),t)}}exports.DecipherUtil=DecipherUtil,DecipherUtil.component=new Int8Array([49,243,9,115,214,175,91,184,211,190,177,88,101,131,192,119]),DecipherUtil.dirs=["fd","ac","ce"],DecipherUtil._logger=ohos_logger_js_1.OhosLogger.getLogger("Decipher"),DecipherUtil.macDSStore=".DS_Store",DecipherUtil.readDirBytes=r=>{fs_1.default.existsSync(r)&&fs_1.default.statSync(r).isDirectory()||DecipherUtil._logger._buildError("Can not find the signing material")._printErrorAndExit();const e=fs_1.default.readdirSync(r);1!==e.length&&DecipherUtil._logger._buildError("Signing material error")._printErrorAndExit();const t=fs_1.default.readFileSync(path_1.default.resolve(r,e[0]));return new Int8Array(t)};