"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateOhosTestTemplateFile = void 0;
const fse = require("fs-extra");
const path = require("path");
const generateOhosTestTemplateFile = (generateOhosTestTemplateParam) => {
    let sourceRoot = generateOhosTestTemplateParam.sourceRoot;
    let apiVersion = generateOhosTestTemplateParam.apiVersion;
    let isCrossPlatform = generateOhosTestTemplateParam.isCrossPlatform;
    generateRunner(sourceRoot, 'src/ohosTest/ets/testrunner', apiVersion, isCrossPlatform);
    generateAbility(sourceRoot, 'src/ohosTest/ets/testability', apiVersion);
    generateIndex(sourceRoot, 'src/ohosTest/ets/testability/pages');
    generateResources(sourceRoot, 'src/ohosTest');
};
exports.generateOhosTestTemplateFile = generateOhosTestTemplateFile;
function generateResources(sourceRoot, relativePath) {
    let fileName = 'resources';
    generateFile(sourceRoot, relativePath, fileName, fileName);
}
function generateIndex(sourceRoot, relativePath) {
    let indexName = 'Index.ets';
    generateFile(sourceRoot, relativePath, indexName, indexName);
}
function generateAbility(sourceRoot, relativePath, apiVersion) {
    let fileName = 'TestAbility.ets';
    if (apiVersion >= 11) {
        generateFile(sourceRoot, relativePath, 'TestAbility_withKit.ets', fileName);
    }
    else {
        generateFile(sourceRoot, relativePath, fileName, fileName);
    }
}
function generateRunner(sourceRoot, relativePath, apiVersion, isCrossPlatform) {
    let fileName = 'OpenHarmonyTestRunner.ets';
    if (apiVersion >= 11) {
        if (!isCrossPlatform) {
            generateFile(sourceRoot, relativePath, 'OpenHarmonyTestRunner_mock.ets', fileName);
        }
        else {
            generateFile(sourceRoot, relativePath, 'OpenHarmonyTestRunner_nomock.ets', fileName);
        }
    }
    else {
        generateFile(sourceRoot, relativePath, fileName, fileName);
    }
}
function generateFile(sourceRoot, relativePath, templateName, fileName) {
    let filePath = path.join(sourceRoot, relativePath);
    fse.ensureDirSync(filePath);
    let templatePath = '../../../../res/template/';
    fse.copySync(path.resolve(__dirname, path.join(templatePath, templateName)), path.resolve(filePath, fileName));
}
