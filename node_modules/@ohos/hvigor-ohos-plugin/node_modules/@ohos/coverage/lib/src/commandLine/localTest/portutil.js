"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findPort = void 0;
const os = require("os");
const node_child_process_1 = require("node:child_process");
function findPort(portNum, maxCount, Logger, portSet) {
    portNum = countValidPort(portNum, portSet);
    if (maxCount > 20) {
        return -1;
    }
    logOSType(Logger);
    if (os.type() === 'Windows_NT') {
        // windows
        const netStat = (0, node_child_process_1.spawnSync)('netstat', ['-ano']);
        if (netStat.stderr.toString().trim()) {
            return -1;
        }
        if (netStat.stdout.toString().indexOf(`:${portNum}`) > -1) {
            maxCount++;
            return findPort(portNum + 1, maxCount, Logger, portSet);
        }
        else {
            portSet.add(portNum);
            return portNum;
        }
    }
    else if (os.type() === 'Darwin' || os.type() === 'Linux') {
        // mac
        const netStat = (0, node_child_process_1.spawnSync)('lsof', [`-i:${portNum}`]);
        if (netStat.stdout.toString().trim()) {
            maxCount++;
            return findPort(portNum + 1, maxCount, Logger, portSet);
        }
        else {
            portSet.add(portNum);
            return portNum;
        }
    }
    portSet.add(portNum);
    return portNum;
}
exports.findPort = findPort;
function countValidPort(portNum, portSet) {
    if (portSet.has(portNum)) {
        let maxPort = 0;
        for (let item of portSet) {
            maxPort = item > maxPort ? item : maxPort;
        }
        portNum = portNum > maxPort ? portNum + 1 : maxPort + 1;
        return portNum;
    }
    else {
        return portNum;
    }
}
function logOSType(Logger) {
    Logger.info(os.type());
}
