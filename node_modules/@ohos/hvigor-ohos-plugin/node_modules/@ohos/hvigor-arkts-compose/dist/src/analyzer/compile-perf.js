"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.CompilePerf=void 0;const constants_js_1=require("../util/constants.js"),compile_event_js_1=require("./compile-event.js"),compile_event_factory_js_1=require("./compile-event-factory.js"),perf_constants_js_1=require("./perf-constants.js"),reversePerfMap=new Map([["## initialize","# BUILD"],["## generate module graph","# BUILD"],["## sort and bind modules","# BUILD"],["## mark included statements","# BUILD"],["## before build end","# BUILD"],["## build end","# BUILD"],["## after build end","# BUILD"],["beforeBuildEnd","# BUILD"],["buildEnd","# BUILD"],["afterBuildEnd","# BUILD"],["beforeBuild","## initialize"],["buildStart","## initialize"],["afterBuildStart","## initialize"],["resolveId","## generate module graph"],["load","## generate module graph"],["resolveDynamicImport","## generate module graph"],["shouldTransformCachedModule","## generate module graph"],["transform","## generate module graph"],["moduleParsed","## generate module graph"],["beforeBuildEnd","## before build end"],["buildEnd","## build end"],["afterBuildEnd","## after build end"]]);class CompilePerf{constructor(e){this.timers=new Set,this.perf=e}clear(){return this.timers.clear(),compile_event_factory_js_1.CompileEventFactory.clear(),this}collect(e){this.timers.add(e)}transform(){const e=new Map,t=new Map,n=new Map;this.handleRollupPerf(e,t,n),compile_event_factory_js_1.CompileEventFactory.removeIf((e=>-1===e.getStartTime()));for(const t of compile_event_factory_js_1.CompileEventFactory.getEvents().values())t.getName()===perf_constants_js_1.ROLLUP_EVENT_NAME&&e.forEach((e=>{t.addChild(e.getId()),e.setParent(t.getId())})),this.handleHookInteriorEvent(t,n);this.mergeHookInteriorEvents(n.values());const r=new Set;for(const e of compile_event_factory_js_1.CompileEventFactory.getEvents().values())this.perf!==constants_js_1.AnalyzeMode.VERBOSE&&e.isFromHook()||r.add(e);return r}persist(){return!0}handleRollupPerf(e,t,n){this.timers.forEach((r=>{const o=compile_event_factory_js_1.CompileEventFactory.createEvent(r.name,r.time,r.frequency).setStartTime(r.startTime).setEndTime(r.endTime).setMemory(r.memory).setState("success");if(r.name.startsWith("# "))e.set(r.name,o);else if(r.name.startsWith("## ")){if(t.set(r.name,o),reversePerfMap.has(r.name)){const t=reversePerfMap.get(r.name),n=e.get(t);n&&(n.addChild(o.getId()),o.setParent(n.getId()))}}else if(r.name.startsWith("- plugin ")){if(this.perf!==constants_js_1.AnalyzeMode.VERBOSE)return void compile_event_factory_js_1.CompileEventFactory.removeEvent(o.getId());o.setType(compile_event_js_1.CONTINUAL_EVENT);const s=r.name.split("- "),a=s[s.length-1];if(reversePerfMap.has(a)){const r=reversePerfMap.get(a);let s=e.get(r);this.connectHookEvent(o,s,n),s=t.get(r),this.connectHookEvent(o,s,n)}}else if("generate ast"===r.name||"analyze ast"===r.name){const e=t.get("## generate module graph");e&&(e.addChild(o.getId()),o.setParent(e.getId()))}else compile_event_factory_js_1.CompileEventFactory.removeEvent(o.getId())}))}connectHookEvent(e,t,n){if(!t)return;t.addChild(e.getId()),e.setParent(t.getId()),updateName(e);const r=e.getName();n.has(r)||n.set(r,e)}handleHookInteriorEvent(e,t){if(!e.isFromHook()||e.getParent())return;e.setType(compile_event_js_1.CONTINUAL_EVENT);const n=e.getCategory();if(n&&t.has(n)){const r=t.get(n);r.addChild(e.getId()),e.setParent(r.getId())}}mergeHookInteriorEvents(e){for(const t of e){const e=new Map,n=[];for(const r of t.getChildren()){const t=compile_event_factory_js_1.CompileEventFactory.getEventById(r);if(!t)continue;t.setType(compile_event_js_1.CONTINUAL_EVENT);const o=t.getName();if(e.has(o)){const n=e.get(o);n.inCreFrequency().inCreTotalTime(t),t.getChildren().forEach((e=>{const t=compile_event_factory_js_1.CompileEventFactory.getEventById(e);t&&(t.setParent(n.getId()),n.addChild(e))})),compile_event_factory_js_1.CompileEventFactory.removeEvent(r)}else n.push(r),e.set(o,t.inCreFrequency().inCreTotalTime(t))}t.setChildren(n),this.mergeHookInteriorEvents(e.values())}}}function updateName(e){const t=e.getName(),n=t.indexOf("("),r=t.substring(n);e.setName(r)}exports.CompilePerf=CompilePerf;