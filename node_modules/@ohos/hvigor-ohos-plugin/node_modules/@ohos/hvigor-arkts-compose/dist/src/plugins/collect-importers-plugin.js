"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.collectImportersPlugin=void 0;const path_1=__importDefault(require("path")),fs_extra_1=__importDefault(require("fs-extra")),hvigor_arkts_base_1=require("@ohos/hvigor-arkts-base"),utils_js_1=require("../util/utils.js"),LOGGER=hvigor_arkts_base_1.ArktsBaseLogger.getPluginLogger("changedFileList collect importers");function collectImportersPlugin(e){let t=[];return{name:"collectImportersPlugin",options(e){t=Object.values(e.input)},buildEnd(){if(!e.collectImportersConfig)return;const{relativeDir:i,buildConfigJsonPath:s,isReload:o}=e.collectImportersConfig;if(!i||!s||!fs_extra_1.default.existsSync(s))return;const l=(0,utils_js_1.getJson5Obj)(s);if(!l.patchConfig||!l.patchConfig.oldMapFilePath)return;const r=path_1.default.resolve(l.patchConfig.oldMapFilePath,"ets.json");if(fs_extra_1.default.ensureDirSync(l.patchConfig.oldMapFilePath),!o){const e=getCompiledFiles(this,t);return void fs_extra_1.default.writeJSONSync(r,{compiledFileList:e})}const n=(0,utils_js_1.getJson5Obj)(r)??{},a=n?.compiledFileList??[],c=l?.patchConfig?.changedFileList;let d=[];c&&fs_extra_1.default.existsSync(c)?d=checkModifiedFiles({changedFileListPath:c,relativeDir:i,compiledFileList:a}):LOGGER.debug(`changedFileList not exists: ${c}`),n.isImportNewFile=isImportNewFile(this,d.map((e=>path_1.default.resolve(i,e))),a),fs_extra_1.default.writeJSONSync(r,n)}}}function checkModifiedFiles({changedFileListPath:e,relativeDir:t,compiledFileList:i}){const s=(0,utils_js_1.getJson5Obj)(e),o=s?.modifiedFiles??[],l=[];let r=!1;LOGGER.debug(`Start to collect modifiedFiles importers in ${e}`),LOGGER.debug(`origin changedFileList modifiedFiles: ${o}`);for(let e=0;e<o.length;e++){const s=o[e],n=path_1.default.resolve(t,s);i.includes(n)?l.push(o[e]):r=!0}return r?(s.modifiedFiles=l,fs_extra_1.default.writeJSONSync(e,s),LOGGER.debug(`changedFileList modifiedFiles change to: ${l}`)):LOGGER.debug("changedFileList not changed"),s.modifiedFiles}function getCompiledFiles(e,t){const i=new Set,s=[...t];for(;s.length>0;){const t=s.shift();t&&(i.add(t),Array.from(e.getModuleInfo(t)?.importedIds??[]).forEach((e=>!i.has(e)&&s.push(e))))}return[...i]}function isImportNewFile(e,t,i){const s=[];return t.forEach((t=>{s.push(...Array.from(e.getModuleInfo(t)?.importedIds??[]))})),s.some((e=>!i.includes(e)))}exports.collectImportersPlugin=collectImportersPlugin;