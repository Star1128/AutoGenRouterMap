{
  "title": "openHarmony module-level build-profile configuration",
  "description": "This document describes the configuration details of the openHarmony module-level configuration file build-profile.json5.",
  "type": "object",
  "definitions": {
    "buildOption": {
      "description": "Configure the related configurations used by the module during the build process.",
      "type": "object",
      "propertyNames": {
        "enum": [
          "name",
          "debuggable",
          "copyFrom",
          "externalNativeOptions",
          "sourceOption",
          "napiLibFilterOption",
          "arkOptions",
          "nativeLib"
        ]
      },
      "properties": {
        "name": {
          "$ref": "#/definitions/name"
        },
        "debuggable": {
          "description": "Debuggable configuration.",
          "type": "boolean",
          "default": true
        },
        "copyFrom": {
          "$ref": "#/definitions/name"
        },
        "externalNativeOptions": {
          "description": "Configurations related to native compilation.",
          "type": "object",
          "propertyNames": {
            "enum": [
              "path",
              "abiFilters",
              "arguments",
              "cppFlags",
              "cFlags",
              "targets"
            ]
          },
          "properties": {
            "path": {
              "description": "Path of the CMakeLists.txt file, for example, ./src/main/cpp/CMakeLists.txt or D:/CMakeLists.txt.",
              "type": "string"
            },
            "abiFilters": {
              "description": "Defines the CPU architecture type of the system where the CPP application runs. Multiple CPU architecture types can be included, for example, Arm64-v8a.",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "arm64-v8a",
                  "armeabi-v7a",
                  "x86_64"
                ]
              },
              "minItems": 1
            },
            "arguments": {
              "description": "Specifies cmake compilation parameters, for example, -v -DOHOS_STL=c++_static",
              "type": "string"
            },
            "cppFlags": {
              "description": "Specifies the settings related to CMAKE_CXX_FLAGS.",
              "type": "string"
            },
            "cFlags": {
              "description": "Specifies the settings related to CMAKE_C_FLAGS.",
              "type": "string"
            },
            "targets": {
              "description": "Specifies the library and executable targets from your CMake project that hvigor should build.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "sourceOption": {
          "description": "Different tags are used to classify source codes so that different source codes can be processed differently during the build process.",
          "type": "object",
          "propertyNames": {
            "enum": [
              "workers"
            ]
          },
          "properties": {
            "workers": {
              "description": "Specifies the ArkTS/TS/JS source code that uses node.js worker, The source code is processed separately during the build process.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^\\.{1,2}\/.*$"
              }
            }
          }
        },
        "napiLibFilterOption": {
          "description": "Filter options for library (.so) files",
          "deprecationMessage": "Please use 'nativeLib/filter' instead in API10 or later.",
          "type": "object",
          "propertyNames": {
            "enum": [
              "excludes",
              "pickFirsts",
              "pickLasts",
              "enableOverride"
            ]
          },
          "properties": {
            "excludes": {
              "description": "Set of excluded patterns. Libraries matching any of these patterns will not be packaged.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pickFirsts": {
              "description": "Set of patterns where the first occurrence is packaged into HAR. For each libraries matched any of these pattern, only the first one will be packaged.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pickLasts": {
              "description": "Set of patterns where the last occurrence is packaged into HAR. For each libraries matched any of these pattern, only the last one will be packaged.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "enableOverride": {
              "description": "Enable the override of native library. Libraries with the same path will be allowed. ",
              "type": "boolean"
            }
          }
        },
        "arkOptions": {
          "description": "Configurations related to ark compilation.",
          "type": "object",
          "propertyNames": {
            "enum": [
              "types",
              "obfuscation",
              "buildProfileFields",
              "runtimeOnly"
            ]
          },
          "properties": {
            "types": {
              "description": "Configurations related to custom types.",
              "type": "array",
              "items": {
                "description": "Relative path or package name of the custom type.",
                "type": "string"
              }
            },
            "runtimeOnly": {
              "description": "The configuration of dynamic import.",
              "type": "object",
              "propertyNames": {
                "enum": [
                  "sources",
                  "packages"
                ]
              },
              "properties": {
                "sources": {
                  "description":"The configuration of dynamic import in the form of relative paths, which include files and folders.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^\\.{1,2}\/.*$"
                  }
                },
                "packages": {
                  "description": "The configuration of dynamic import in the format of file name and package name.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^(@(?![0-9\\-_])[a-zA-Z0-9\\-_]+(?<![\\-_])/)?(?![0-9\\-_.])[a-zA-Z0-9\\-_.]+(?<![\\-_.])$"
                  }
                }
              }
            },
            "obfuscation": {
              "description": "Configurations related to code obfuscation.",
              "type": "object",
              "propertyNames": {
                "enum": [
                  "ruleOptions",
                  "consumerFiles"
                ]
              },
              "properties": {
                "ruleOptions": {
                  "description": "Configurations related to obfuscation rules",
                  "type": "object",
                  "propertyNames": {
                    "enum": [
                      "enable",
                      "files"
                    ]
                  },
                  "required": [
                    "enable"
                  ],
                  "properties": {
                    "enable": {
                      "description": "Enable the code obfuscation",
                      "type": "boolean",
                      "default": true
                    },
                    "files": {
                      "description": "Declare the files of the obfuscation rules.",
                      "type": [
                        "string",
                        "array"
                      ],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "consumerFiles": {
                  "description": "Obfuscation rule files included in the har.",
                  "type": [
                    "string",
                    "array"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "buildProfileFields": {
              "description": "build profile used for ArkTS.",
              "type": "object",
              "patternProperties": {
                "^[0-9a-zA-Z_-]+$": {
                  "type": [
                    "string",
                    "number",
                    "boolean"
                  ]
                }
              },
              "additionalProperties": false
            }
          }
        },
        "nativeLib": {
          "description": "Native lib options",
          "type": "object",
          "propertyNames": {
            "enum": [
              "debugSymbol",
              "filter",
              "headerPath",
              "collectAllLibs"
            ]
          },
          "properties": {
           "collectAllLibs": {
              "description": "Whether to lift the restriction that only files with the .so extension are collected under the libs directory.",
              "type": "boolean",
              "default": false
            },
            "debugSymbol": {
              "description": "debugSymbol option",
              "type": "object",
              "propertyNames": {
                "enum": [
                  "strip",
                  "exclude"
                ]
              },
              "properties": {
                "strip": {
                  "description": "Specifies whether to strip .so files.",
                  "type": "boolean"
                },
                "exclude": {
                  "description": "Lists the .so files to be excluded from strip. If strip is set to true, the matched .so files in the list are not stripped. If strip is set to false, only the matched .so files in the list are stripped.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "filter": {
              "description": "Native libs filter option",
              "type": "object",
              "propertyNames": {
                "enum": [
                  "excludes",
                  "pickFirsts",
                  "pickLasts",
                  "enableOverride",
                  "select"
                ]
              },
              "properties": {
                "select": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "propertyNames": {
                      "enum": [
                        "package",
                        "version",
                        "include",
                        "exclude"
                      ]
                    },
                    "properties": {
                      "package": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      },
                      "include": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "exclude": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "excludes": {
                  "description": "Set of excluded patterns. Libraries matching any of these patterns will not be packaged.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pickFirsts": {
                  "description": "Set of patterns where the first occurrence is packaged into HAR. For each libraries matched any of these pattern, only the first one will be packaged.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pickLasts": {
                  "description": "Set of patterns where the last occurrence is packaged into HAR. For each libraries matched any of these pattern, only the last one will be packaged.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "enableOverride": {
                  "description": "Enable the override of native library. Libraries with the same path will be allowed. ",
                  "type": "boolean"
                }
              }
            },
            "headerPath": {
              "type": "string",
              "description": "Path to a directory containing headers to export to dependents of this module."
            }
          }
        }
      }
    },
    "name": {
      "description": "Name of configurations.",
      "type": "string",
      "pattern": "^[0-9a-zA-Z_-]+$"
    }
  },
  "propertyNames": {
    "enum": [
      "apiType",
      "targets",
      "buildOption",
      "buildOptionSet",
      "buildModeBinder"
    ]
  },
  "properties": {
    "targets": {
      "description": "Defines different target schemes customized for the module. Multiple target schemes can be included. By default, a default target exists.",
      "type": "array",
      "items": {
        "type": "object",
        "propertyNames": {
          "enum": [
            "name",
            "runtimeOS",
            "output",
            "config",
            "resource",
            "source"
          ]
        },
        "properties": {
          "name": {
            "description": "Define the target name",
            "type": "string",
            "maxLength": 127,
            "pattern": "^[0-9a-zA-Z_-]+$"
          },
          "runtimeOS": {
            "description": "The type of runtimeOS specified by the target",
            "type": "string",
            "enum": [
              "HarmonyOS",
              "OpenHarmony"
            ]
          },
          "output": {
            "description": "Customize the configuration of the application package generated by the product.",
            "type": "object",
            "propertyNames": {
              "enum": [
                "artifactName"
              ]
            },
            "required": [
              "artifactName"
            ],
            "properties": {
              "artifactName": {
                "description": "Customize the name of the application package generated by the product.",
                "type": "string",
                "pattern": "^[\\da-zA-Z0-9._-]+$"
              }
            }
          },
          "config": {
            "description": "Configurations related to target customization ",
            "type": "object",
            "propertyNames": {
              "enum": [
                "deviceType",
                "buildOption"
              ]
            },
            "properties": {
              "deviceType": {
                "description": "Select the range of devices supported by the target.",
                "type": "array",
                "items": {
                  "type": "string",
                  "maxLength": 127
                }
              },
              "buildOption": {
                "$ref": "#/definitions/buildOption",
                "propertyNames": {
                  "enum": [
                    "sourceOption",
                    "externalNativeOptions",
                    "napiLibFilterOption",
                    "arkOptions",
                    "nativeLib"
                  ]
                }
              }
            }
          },
          "resource": {
            "description": "Resource directory contained in the module target",
            "type": "object",
            "propertyNames": {
              "enum": [
                "directories"
              ]
            },
            "properties": {
              "directories": {
                "description": "Resource directory contained in the module target, if this field is not configured, the default value is ./src/main/resources",
                "type": "array",
                "items": {
                  "description": "Relative directory of the resource,list ./src/main/resources ",
                  "type": "string"
                }
              }
            }
          },
          "source": {
            "description": "Specifies the target code range, which is used to customize target functions, such as ability selection and page customization.",
            "type": "object",
            "propertyNames": {
              "enum": [
                "sourceRoots"
              ]
            },
            "properties": {
              "sourceRoots": {
                "description": "In StageMode,specifies the extended source directories of the ability selected by the target.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "minItems": 1
              }
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "minItems": 1
    },
    "buildOption": {
      "$ref": "#/definitions/buildOption",
      "propertyNames": {
        "enum": [
          "sourceOption",
          "externalNativeOptions",
          "napiLibFilterOption",
          "arkOptions",
          "nativeLib"
        ]
      }
    },
    "apiType": {
      "type": "string",
      "description": "Ability API model type. The faMode and updated stageMode models can be configured.",
      "enum": [
        "faMode",
        "stageMode"
      ]
    },
    "buildOptionSet": {
      "description": "Set of build configuration, each of which is the universal set of configuration options for all available tools in the currently supported compilation process.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/buildOption"
      }
    },
    "buildModeBinder": {
      "description": "Association configuration between build mode and build configurations, through which different build configurations and targets can be combined and bound to corresponding build modes, where build modes need to be in the engineering level build pattern list.",
      "type": "array",
      "items": {
        "type": "object",
        "propertyNames": {
          "enum": [
            "buildModeName",
            "mappings"
          ]
        },
        "properties": {
          "buildModeName": {
            "$ref": "#/definitions/name"
          },
          "mappings": {
            "description": "The specific mapping table in the build mode binding describes the one-to-one relationship between the targets and build configurations.",
            "type": "array",
            "items": {
              "type": "object",
              "propertyNames": {
                "enum": [
                  "targetName",
                  "buildOptionName"
                ]
              },
              "properties": {
                "targetName": {
                  "$ref": "#/definitions/name"
                },
                "buildOptionName": {
                  "$ref": "#/definitions/name"
                }
              }
            }
          }
        }
      }
    }
  },

  "if": {
    "properties": {
      "apiType": {
        "const": "stageMode"
      }
    }
  },
  "then": {
    "properties": {
      "buildOption": {
        "propertyNames": {
          "enum": [
            "name",
            "debuggable",
            "copyFrom",
            "externalNativeOptions",
            "sourceOption",
            "napiLibFilterOption",
            "arkOptions",
            "nativeLib"
          ]
        }
      }
    }
  },
  "else": {
    "properties": {
      "buildOption": {
        "propertyNames": {
          "enum": [
            "name",
            "debuggable",
            "copyFrom",
            "externalNativeOptions",
            "napiLibFilterOption",
            "arkOptions",
            "nativeLib"
          ]
        },
        "properties": {
          "arkOptions": {
            "propertyNames": {
              "enum": [
                "types"
              ]
            }
          }
        }
      },
      "buildOptionSet": {
        "description": "Set of build configuration, each of which is the universal set of configuration options for all available tools in the currently supported compilation process.",
        "type": "array",
        "items": {
          "propertyNames": {
            "enum": [
              "name",
              "debuggable",
              "copyFrom",
              "externalNativeOptions",
              "napiLibFilterOption",
              "arkOptions",
              "nativeLib"
            ]
          },
          "properties": {
            "arkOptions": {
              "propertyNames": {
                "enum": [
                  "types"
                ]
              }
            }
          }
        }
      }
    }
  }
}
