{
  "title": "openHarmony project-level build-profile configuration",
  "description": "This document describes the configuration details of the openHarmony project-level configuration file build-profile.json5.",
  "type": "object",
  "definitions": {
    "buildOption": {
      "description": "Configure the related configurations used by the project during the build process.",
      "type": "object",
      "propertyNames": {
        "enum": [
          "packOptions",
          "debuggable",
          "resOptions",
          "externalNativeOptions",
          "sourceOption",
          "napiLibFilterOption",
          "arkOptions",
          "nativeLib",
          "strictMode",
          "nativeCompiler"
        ]
      },
      "properties": {
        "packOptions": {
          "description": "Package configuration options, which are used to limit the package size and number of packages.",
          "type": "object",
          "propertyNames": {
            "enum": [
              "buildAppSkipSignHap"
            ]
          },
          "properties": {
            "buildAppSkipSignHap": {
              "description": "The build APP does not generate a signed HAP package.",
              "type": "boolean",
              "default": false
            }
          }
        },
        "debuggable": {
          "description": "Debuggable configuration.",
          "type": "boolean",
          "default": true
        },
        "resOptions": {
          "description": "Configurations related to resource compilation",
          "type": "object"
        },
        "externalNativeOptions": {
          "description": "Configurations related to native compilation.",
          "type": "object",
          "propertyNames": {
            "enum": [
              "path",
              "abiFilters",
              "arguments",
              "cppFlags"
            ]
          },
          "properties": {
            "path": {
              "description": "Path of the CMakeLists.txt file, for example, ./src/main/cpp/CMakeLists.txt or D:/CMakeLists.txt.",
              "type": "string"
            },
            "abiFilters": {
              "description": "Defines the CPU architecture type of the system where the CPP application runs. Multiple CPU architecture types can be included, for example, Arm64-v8a.",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "arm64-v8a",
                  "armeabi-v7a",
                  "x86_64"
                ]
              },
              "minItems": 1
            },
            "arguments": {
              "description": "Specifies cmake compilation parameters, for example, -v -DOHOS_STL=c++_static",
              "type": "string"
            },
            "cppFlags": {
              "description": "Specifies the settings related to CMAKE_CXX_FLAGS.",
              "type": "string"
            }
          }
        },
        "sourceOption": {
          "description": "Different tags are used to classify source codes so that different source codes can be processed differently during the build process.",
          "type": "object",
          "propertyNames": {
            "enum": [
              "workers"
            ]
          },
          "properties": {
            "workers": {
              "description": "Specifies the JS/TS source code that uses node.js worker, The source code is processed separately during the build process.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^\\.{1,2}\/.*$"
              }
            }
          }
        },
        "napiLibFilterOption": {
          "description": "Filter options for native library (.so) files",
          "deprecationMessage": "Please use 'nativeLib/filter' instead in API10 or later.",
          "type": "object",
          "propertyNames": {
            "enum": [
              "excludes",
              "pickFirsts",
              "pickLasts",
              "enableOverride",
              "select"
            ]
          },
          "properties": {
            "select": {
              "type": "array",
              "items": {
                "type": "object",
                "propertyNames": {
                  "enum": [
                    "package",
                    "version",
                    "include",
                    "exclude"
                  ]
                },
                "properties": {
                  "package": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  },
                  "include": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "exclude": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "excludes": {
              "description": "Set of excluded patterns. Libraries matching any of these patterns will not be packaged.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pickFirsts": {
              "description": "Set of patterns where the first occurrence is packaged into HAP/HSP. For each libraries matched any of these pattern, only the first one will be packaged.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pickLasts": {
              "description": "Set of patterns where the last occurrence is packaged into HAP/HSP. For each libraries matched any of these pattern, only the last one will be packaged.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "enableOverride": {
              "description": "Enable the override of native library. Libraries with the same path will be allowed. ",
              "type": "boolean"
            }
          }
        },
        "arkOptions": {
          "description": "Configurations related to ark compilation.",
          "type": "object",
          "propertyNames": {
            "enum": [
              "apPath",
              "hostPGO",
              "types",
              "buildProfileFields",
              "tscConfig"
            ]
          },
          "properties": {
            "apPath": {
              "description": "Application hotspot information file",
              "type": "string",
              "maxLength": 127
            },
            "hostPGO": {
              "description": "Enable profile guided optimization ability. Support in API10+.",
              "type": "boolean"
            },
            "types": {
              "description": "Configurations related to custom types",
              "type": "array",
              "items": {
                "description": "Relative path or package name of the custom type.",
                "type": "string"
              }
            },
            "buildProfileFields": {
              "description": "build profile used for ArkTS.",
              "type": "object",
              "patternProperties": {
                "^[0-9a-zA-Z_-]+$": {
                  "type": [
                    "string",
                    "number",
                    "boolean"
                  ]
                }
              },
              "additionalProperties": false
            },
            "tscConfig": {
              "description": "Configurations related to tsconfig.json",
              "type": "object",
              "propertyNames": {
                "enum": [
                  "targetESVersion"
                ]
              },
              "properties": {
                "targetESVersion": {
                  "type": [
                    "string"
                  ],
                  "enum": [
                    "ES2017",
                    "ES2021"
                  ]
                }
              }
            }
          }
        },
        "nativeCompiler": {
          "description": "Used to configure the native compiler",
          "type": "string",
          "enum": [
            "Original",
            "BiSheng"
          ],
          "default": "Original"
        },
        "nativeLib": {
          "description": "Native lib options",
          "type": "object",
          "propertyNames": {
            "enum": [
              "debugSymbol",
              "filter",
              "headerPath",
              "collectAllLibs"
            ]
          },
          "properties": {
            "collectAllLibs": {
              "description": "Whether to lift the restriction that only files with the .so extension are collected under the libs directory.",
              "type": "boolean",
              "default": false
            },
            "debugSymbol": {
              "description": "debugSymbol option",
              "type": "object",
              "propertyNames": {
                "enum": [
                  "strip",
                  "exclude"
                ]
              },
              "properties": {
                "strip": {
                  "description": "Specifies whether to strip .so files.",
                  "type": "boolean"
                },
                "exclude": {
                  "description": "Lists the .so files to be excluded from strip. If strip is set to true, the matched .so files in the list are not stripped. If strip is set to false, only the matched .so files in the list are stripped.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "filter": {
              "description": "Native libs filter option",
              "type": "object",
              "propertyNames": {
                "enum": [
                  "excludes",
                  "pickFirsts",
                  "pickLasts",
                  "enableOverride"
                ]
              },
              "properties": {
                "excludes": {
                  "description": "Set of excluded patterns. Libraries matching any of these patterns will not be packaged.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pickFirsts": {
                  "description": "Set of patterns where the first occurrence is packaged into HAP/HSP. For each libraries matched any of these pattern, only the first one will be packaged.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pickLasts": {
                  "description": "Set of patterns where the last occurrence is packaged into HAP/HSP. For each libraries matched any of these pattern, only the last one will be packaged.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "enableOverride": {
                  "description": "Enable the override of native library. Libraries with the same path will be allowed. ",
                  "type": "boolean"
                }
              }
            },
            "headerPath": {
              "type": "string",
              "description": "Path to a directory containing headers to export to dependents of this module."
            }
          }
        },
        "strictMode": {
          "description": "Defines the strict check mode.",
          "type": "object",
          "propertyNames": {
            "enum": [
              "noExternalImportByPath",
              "useNormalizedOHMUrl",
              "caseSensitiveCheck",
              "duplicateDependencyCheck"
            ]
          },
          "properties": {
            "noExternalImportByPath": {
              "description": "Specifies whether to prevent file imports using absolute paths and file imports outside of the current module using relative paths. The value true means to prevent such imports.",
              "type": "boolean",
              "default": false
            },
            "useNormalizedOHMUrl": {
              "description": "Whether to use the new ohmurl format.",
              "type": "boolean",
              "default": false
            },
            "caseSensitiveCheck": {
              "description": "enable caseSensitive.",
              "type": "boolean",
              "default": false
            },
            "duplicateDependencyCheck": {
              "description": "Specifies whether to check duplicated har dependencies between hsp during building app.",
              "type": "boolean",
              "default": false
            }
          }
        }
      }
    }
  },
  "propertyNames": {
    "enum": [
      "app",
      "modules"
    ]
  },
  "properties": {
    "app": {
      "description": "OpenHarmony application project-level configuration information, which is shared by all FA/PA modules, including the compilation API level, signature, and product information.",
      "type": "object",
      "propertyNames": {
        "enum": [
          "signingConfigs",
          "products",
          "buildModeSet",
          "multiProjects"
        ]
      },
      "properties": {
        "signingConfigs": {
          "description": "This field contains the signature materials used for modifying the openHarmony application. Multiple signature materials can be configured.",
          "type": "array",
          "items": {
            "type": "object",
            "propertyNames": {
              "enum": [
                "name",
                "material",
                "type"
              ]
            },
            "properties": {
              "material": {
                "type": "object",
                "propertyNames": {
                  "enum": [
                    "storePassword",
                    "certpath",
                    "keyAlias",
                    "keyPassword",
                    "profile",
                    "signAlg",
                    "storeFile"
                  ]
                },
                "properties": {
                  "storePassword": {
                    "type": "string"
                  },
                  "certpath": {
                    "type": "string"
                  },
                  "keyAlias": {
                    "type": "string"
                  },
                  "keyPassword": {
                    "type": "string"
                  },
                  "profile": {
                    "type": "string"
                  },
                  "signAlg": {
                    "type": "string",
                    "enum": [
                      "SHA256withECDSA"
                    ]
                  },
                  "storeFile": {
                    "type": "string"
                  }
                },
                "required": [
                  "storeFile",
                  "storePassword",
                  "keyAlias",
                  "keyPassword",
                  "signAlg",
                  "profile",
                  "certpath"
                ]
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "HarmonyOS",
                  "OpenHarmony"
                ]
              }
            },
            "required": [
              "name",
              "material"
            ]
          }
        },
        "products": {
          "description": "This field is used to describe different product types defined by the openHarmony application. By default, a default product exists and different signature materials can be specified.",
          "type": "array",
          "items": {
            "type": "object",
            "oneOf": [
              {
                "propertyNames": {
                  "enum": [
                    "name",
                    "signingConfig",
                    "bundleName",
                    "buildOption",
                    "runtimeOS",
                    "compileSdkVersion",
                    "compatibleSdkVersion",
                    "targetSdkVersion",
                    "bundleType",
                    "label",
                    "icon",
                    "versionCode",
                    "versionName",
                    "resource",
                    "output",
                    "vendor"
                  ]
                }
              },
              {
                "propertyNames": {
                  "enum": [
                    "name",
                    "signingConfig",
                    "bundleName",
                    "buildOption",
                    "runtimeOS",
                    "compileSdkVersion",
                    "compatibleSdkVersion",
                    "targetSdkVersion",
                    "bundleType",
                    "label",
                    "icon",
                    "versionCode",
                    "versionName",
                    "resource",
                    "output",
                    "arkTSVersion",
                    "vendor"
                  ]
                },
                "if": {
                  "required": [
                    "arkTSVersion"
                  ]
                },
                "then": {
                  "properties": {
                    "compileSdkVersion": {
                      "description": "Specifies the SDK API version when the OpenHarmony application is compiled. This value determines the value of apiTargetVersion in the HAP package.",
                      "anyOf": [
                        {
                          "pattern": "^((?:[5-9]|[1-9]\\d+)\\.\\d+\\.\\d+\\(\\d+\\)|4\\.(?:[1-9]\\d*\\.\\d+\\(\\d+\\)|0\\.(?:[1-9]\\d*\\(\\d+\\)|0\\((?:1[1-9]|[2-9]\\d+)\\))))$",
                          "type": [
                            "string"
                          ]
                        },
                        {
                          "minimum": 11,
                          "type": [
                            "number"
                          ]
                        }
                      ],
                      "exclusiveMinimum": 7
                    }
                  }
                },
                "required": [
                  "arkTSVersion"
                ]
              }
            ],
            "required": [
              "name",
              "compatibleSdkVersion"
            ],
            "properties": {
              "compileSdkVersion": {
                "description": "Specifies the SDK API version when the OpenHarmony application is compiled. This value determines the value of apiTargetVersion in the HAP package.",
                "type": [
                  "integer",
                  "string"
                ],
                "exclusiveMinimum": 7
              },
              "compatibleSdkVersion": {
                "description": "Specifies the lowest SDK API level version compatible with the OpenHarmony application during compilation. This value determines the value of apiCompatibleVersion in the HAP package.",
                "type": [
                  "integer",
                  "string"
                ],
                "exclusiveMinimum": 3
              },
              "targetSdkVersion": {
                "description": "Specifies the SDK API version when the OpenHarmony application is targeted. This value determines the value of apiCompatibleVersion in the HAP package.",
                "type": [
                  "integer",
                  "string"
                ],
                "exclusiveMinimum": 7
              },
              "runtimeOS": {
                "description": "The type of runtimeOS specified by the product",
                "type": "string",
                "enum": [
                  "HarmonyOS",
                  "OpenHarmony"
                ]
              },
              "name": {
                "description": "Defines the product type name of the openHarmony application. By default, there is a product named default.",
                "type": "string",
                "pattern": "^[\\da-zA-Z_-]+$"
              },
              "arkTSVersion": {
                "description": "ArkTS Language Version Configuration.",
                "type": "string",
                "enum": [
                  "1.0",
                  "1.1"
                ]
              },
              "output": {
                "description": "Customize the configuration of the application package generated by the product.",
                "type": "object",
                "propertyNames": {
                  "enum": [
                    "artifactName"
                  ]
                },
                "required": [
                  "artifactName"
                ],
                "properties": {
                  "artifactName": {
                    "description": "Customize the name of the application package generated by the product.",
                    "type": "string",
                    "pattern": "^[\\da-zA-Z0-9._-]+$"
                  }
                }
              },
              "signingConfig": {
                "description": "Specifies the signature material used by the product. The current signature material must be the material declared in app/signingConfigs. You can select the signature material based on its name.",
                "type": "string"
              },
              "bundleName": {
                "description": "Indicates the bundle name of the application. It uniquely identifies the application.",
                "type": "string",
                "maxLength": 127,
                "minLength": 7,
                "pattern": "^(([a-zA-Z]|[a-zA-Z]\\w+)[.]([\\da-zA-Z_.]+))|([{]([a-zA-Z]|[a-zA-Z]\\w+)[}](.huawei.com))|[{](bundleName)[}]$"
              },
              "buildOption": {
                "$ref": "#/definitions/buildOption"
              },
              "bundleType": {
                "description": "Defines the type of bundle.",
                "type": "string",
                "enum": [
                  "app",
                  "atomicService",
                  "shared"
                ]
              },
              "label": {
                "description": "Defines the label of the application.",
                "type": "string",
                "maxLength": 255,
                "pattern": "^[$]string:[0-9a-zA-Z_.]+|(?=.*[{])(?=.*[}])[0-9a-zA-Z_.{}]+$"
              },
              "icon": {
                "description": "Defines the index to the application icon file, in the format of \"$media:application_icon\".This label can be left blank by default.",
                "type": "string",
                "pattern": "^[$]media:[0-9a-zA-Z_.]+|(?=.*[{])(?=.*[}])[0-9a-zA-Z_.{}]+$"
              },
              "versionCode": {
                "description": "Defines the versionCode number of the application. The value is an integer greater than 0. A larger value generally represents a later version.The system determines the application version based on the tag value.This label cannot be left blank.",
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
              },
              "versionName": {
                "description": "Defines the text description of the application version.Used for displaying to users.A string can contain a maximum of 127 bytes.This label cannot be left blank.",
                "type": "string",
                "maxLength": 127,
                "pattern": "^[0-9.]+|(?=.*[{])(?=.*[}])[0-9a-zA-Z_.{}]+$"
              },
              "resource": {
                "description": "Defines the resource of the application.",
                "type": "object",
                "propertyNames": {
                  "enum": [
                    "directories"
                  ]
                },
                "required": [
                  "directories"
                ],
                "properties": {
                  "directories": {
                    "description": "Defines the directories of the resources",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1
                  }
                }
              },
              "vendor": {
                "description": "Defines the vendor of the different products.Used for displaying to users.A string can contain a maximum of 127 bytes.This label can be left blank by default.",
                "type": "string",
                "maxLength": 255
              }
            },
                "if": {
                  "properties": {
                    "runtimeOS": {
                      "const": "HarmonyOS"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "compileSdkVersion": {
                      "type": "string"
                    },
                    "compatibleSdkVersion": {
                      "type": "string"
                    }
                  }
                },
                "else": {
                  "properties": {
                  "compileSdkVersion": {
                    "type": "integer"
                  },
                  "compatibleSdkVersion": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "buildModeSet": {
          "description": "Set of build mode, each of which refers to a solution for using different build configurations when executing different target tasks. In default configurations, debug mode used in packageHap and release mode used in packageApp.",
          "type": "array",
          "items": {
            "type": "object",
            "propertyNames": {
              "enum": [
                "name",
                "buildOption"
              ]
            },
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "BuildOption name.",
                "type": "string",
                "pattern": "^[0-9a-zA-Z_-]+$",
                "not": {
                  "anyOf": [
                    {
                      "pattern": "^test$"
                    }
                  ]
                }
              },
              "buildOption": {
                "$ref": "#/definitions/buildOption"
              }
            }
          }
        },
        "multiProjects": {
          "description": "Indicates whether current project supports multiple project.",
          "type": "boolean",
          "default": false
        }
      },
      "required": []
    },
    "modules": {
      "description": "Describes all modules in the openHarmony application. The module configuration includes the name, path, and target-product association configuration.",
      "type": "array",
      "items": {
        "type": "object",
        "propertyNames": {
          "enum": [
            "name",
            "srcPath",
            "targets"
          ]
        },
        "properties": {
          "srcPath": {
            "description": "This section describes the source code path of the module. It is the relative path of the current configuration file. The path must contain configurations related to hvigorfile.ts/js and package.json.",
            "type": "string"
          },
          "name": {
            "description": "Logical name of a module. The value must be the same as that of moduleName in the config.json/module.json file.",
            "type": "string"
          },
          "targets": {
            "description": "Configure the association between the target of the module and the product of the application.",
            "type": "array",
            "items": {
              "type": "object",
              "propertyNames": {
                "enum": [
                  "name",
                  "applyToProducts"
                ]
              },
              "properties": {
                "name": {
                  "description": "Name of the module target. The target name must be in the target configuration in build-profile.json5 of the module-level.",
                  "type": "string",
                  "pattern": "^[\\da-zA-Z_-]+$"
                },
                "applyToProducts": {
                  "description": "Describes which products the target is used for, which means that different products can contain different targets.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": "^[\\da-zA-Z_-]+$"
                  },
                  "minItems": 1
                }
              }
            }
          }
        },
        "required": [
          "srcPath",
          "name"
        ]
      },
      "minItems": 1
    }
  },
  "required": [
    "app",
    "modules"
  ]
}
